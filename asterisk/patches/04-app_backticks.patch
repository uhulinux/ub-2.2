diff -Naur a/apps/app_backticks.c b/apps/app_backticks.c
--- a/apps/app_backticks.c	1970-01-01 01:00:00.000000000 +0100
+++ b/apps/app_backticks.c	2008-12-04 21:02:22.000000000 +0100
@@ -0,0 +1,145 @@
+/*
+ * Asterisk -- An open source telephony toolkit.
+ *
+ * Copyright (C) <Year>, <Your Name Here>
+ *
+ * Gergely Dömsödi <gdomsodi@calgo.hu>
+ *
+ * See http://www.asterisk.org for more information about
+ * the Asterisk project. Please do not directly contact
+ * any of the maintainers of this project for assistance;
+ * the project provides a web site, mailing lists and IRC
+ * channels for your use.
+ *
+ * This program is free software, distributed under the terms of
+ * the GNU General Public License Version 2. See the LICENSE file
+ * at the top of the source tree.
+ */
+
+/*! \file
+ *
+ * \brief Backtick Application
+ *
+ * \author\verbatim Gergely Dömsödi <gdomsodi@calgo.hu> \endverbatim
+ *
+ * This is an application to execute a shell command from the dialplan and save its output to a channel variable
+ * \ingroup applications
+ */
+
+/*** MODULEINFO
+	<defaultenabled>yes</defaultenabled>
+ ***/
+
+#include "asterisk.h"
+
+ASTERISK_FILE_VERSION(__FILE__, "$Revision: 89424 $")
+
+#include "asterisk/file.h"
+#include "asterisk/channel.h"
+#include "asterisk/pbx.h"
+#include "asterisk/module.h"
+#include "asterisk/lock.h"
+#include "asterisk/app.h"
+
+static char *app = "BackTicks";
+static char *synopsis =
+"Execute a shell command and save its output to a channel variable.";
+static char *descrip = "This application is to execute a shell command and save its output.\n"
+ " to a channel variable.";
+
+
+static char *do_backticks(char *command, char *buf, size_t len) {
+	int fds[2], pid = 0;
+	char *ret = NULL;
+
+	memset(buf, 0, len);
+
+	if (pipe(fds)) {
+		ast_log(LOG_WARNING, "Pipe/Exec failed\n");
+	} else { /* good to go*/
+		pid = fork();
+
+		if (pid < 0) {
+			ast_log(LOG_WARNING, "Fork failed\n");
+			close(fds[0]);
+			close(fds[1]);
+		} else if (pid) { /* parent */
+			close(fds[1]);
+			read(fds[0], buf, len);
+			close(fds[0]);
+			ret = buf;
+		} else { /* child */
+			char *argv[255] = {0};
+			int argc = 0;
+			char *p;
+			char *mycmd = ast_strdupa(command);
+
+			close(fds[0]);
+			dup2(fds[1], STDOUT_FILENO);
+			argv[argc++] = mycmd;
+
+			do {
+				if ((p = strchr(mycmd, ' '))) {
+					*p = '\0';
+					mycmd = ++p;
+					argv[argc++] = mycmd;
+				}
+			} while (p);
+
+			close(fds[1]);
+			execv(argv[0], argv);
+/* DoH! */
+			ast_log(LOG_ERROR, "exec of %s failed\n", argv[0]);
+			exit(0);
+		}
+	}
+
+	return buf;
+}
+
+
+static int backticks_exec(struct ast_channel *chan, void *data)
+{
+	int res = 0;
+	char buf[1024], *argv[2], *mydata;
+	int argc = 0;
+
+	if (!data) {
+		return -1;
+	}
+	/* Do our thing here */
+
+
+	if (!(mydata = ast_strdupa(data))) {
+		ast_log(LOG_ERROR, "Memory Error!\n");
+		res = -1;
+	} else {
+		if ((argc = ast_app_separate_args(mydata, ',', argv, sizeof(argv) / sizeof(argv[0]))) < 2) {
+			res = -1;
+		}
+		
+		if (do_backticks(argv[1], buf, sizeof(buf))) {
+			pbx_builtin_setvar_helper(chan,argv[0],buf);
+		} else {
+			res = -1;
+		}
+	}
+	return res;
+}
+
+static int unload_module(void)
+{
+	int res;
+	res = ast_unregister_application(app);
+	return res;
+}
+
+static int load_module(void)
+{
+	if (ast_register_application(app, backticks_exec, synopsis, descrip))
+		return AST_MODULE_LOAD_DECLINE;
+
+	return AST_MODULE_LOAD_SUCCESS;
+}
+
+AST_MODULE_INFO_STANDARD(ASTERISK_GPL_KEY, "Backticks Application");
