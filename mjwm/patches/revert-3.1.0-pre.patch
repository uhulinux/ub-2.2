diff -Naur mjwm-4.0.0/include/amm_options.h mjwm-070e95eed4f34099d6adb8a4d294b03da69d186f/include/amm_options.h
--- mjwm-4.0.0/include/amm_options.h	2014-11-15 18:14:15.000000000 +0100
+++ mjwm-070e95eed4f34099d6adb8a4d294b03da69d186f/include/amm_options.h	2014-11-09 14:18:15.000000000 +0100
@@ -43,7 +43,7 @@
 
     bool hasValidSummaryType() { return (summary_type == "short" || summary_type == "normal" || summary_type == "long"); }
 
-    static AmmOptions Default(std::string home, std::string language);
+    static AmmOptions Default(std::string home);
 };
 
 } // namespace amm
diff -Naur mjwm-4.0.0/include/command_line_options_parser.h mjwm-070e95eed4f34099d6adb8a4d294b03da69d186f/include/command_line_options_parser.h
--- mjwm-4.0.0/include/command_line_options_parser.h	2014-11-15 18:14:15.000000000 +0100
+++ mjwm-070e95eed4f34099d6adb8a4d294b03da69d186f/include/command_line_options_parser.h	2014-11-09 14:18:15.000000000 +0100
@@ -26,13 +26,10 @@
 class CommandLineOptionsParser
 {
 public:
-    CommandLineOptionsParser(std::string home, std::string language) : home_(home), language_(language) { }
-    AmmOptions parse(int argc, char *const *argv);
+    AmmOptions parse(int argc, char *const *argv, std::string home);
 
 private:
     void allowMultipleEntries();
-    std::string home_;
-    std::string language_;
 };
 } // namespace amm
 
diff -Naur mjwm-4.0.0/include/messages.h mjwm-070e95eed4f34099d6adb8a4d294b03da69d186f/include/messages.h
--- mjwm-4.0.0/include/messages.h	2014-11-15 18:14:15.000000000 +0100
+++ mjwm-070e95eed4f34099d6adb8a4d294b03da69d186f/include/messages.h	2014-11-09 14:18:15.000000000 +0100
@@ -33,7 +33,6 @@
 std::string autogeneratedByAmm();
 std::string noValidDesktopEntryFiles();
 std::string badCategoryFile(const std::string &file_name);
-std::string outputPathBlockedByDirectory(const std::string &file_name);
 std::string badOutputFile(const std::string &file_name);
 
 } // namespace messages
diff -Naur mjwm-4.0.0/include/system_environment.h mjwm-070e95eed4f34099d6adb8a4d294b03da69d186f/include/system_environment.h
--- mjwm-4.0.0/include/system_environment.h	2014-11-15 18:14:15.000000000 +0100
+++ mjwm-070e95eed4f34099d6adb8a4d294b03da69d186f/include/system_environment.h	2014-11-09 14:18:15.000000000 +0100
@@ -32,7 +32,6 @@
     std::string home() const { return home_; }
     std::string xdgDataHome() const { return xdg_data_home_; }
     std::vector<std::string> xdgDataDirectories() const;
-    std::string language() const { return language_; }
     std::vector<std::string> applicationDirectories() const;
     std::vector<std::string> iconThemeDirectories() const;
 
@@ -40,9 +39,6 @@
     std::string home_;
     std::string xdg_data_home_;
     std::string xdg_data_dirs_;
-    std::string language_;
-
-    std::string getLanguageWith(const char *raw);
 };
 } // namespace amm
 
diff -Naur mjwm-4.0.0/src/amm.cc mjwm-070e95eed4f34099d6adb8a4d294b03da69d186f/src/amm.cc
--- mjwm-4.0.0/src/amm.cc	2014-11-15 18:14:15.000000000 +0100
+++ mjwm-070e95eed4f34099d6adb8a4d294b03da69d186f/src/amm.cc	2014-11-09 14:18:15.000000000 +0100
@@ -65,7 +65,7 @@
 
 void Amm::loadCommandLineOption(int argc, char **argv)
 {
-    options_ = CommandLineOptionsParser(environment_.home(), environment_.language()).parse(argc, argv);
+    options_ = CommandLineOptionsParser().parse(argc, argv, environment_.home());
     if (!options_.is_parsed) {
         std::cerr << messages::optionError();
         exit(2);
@@ -128,6 +128,7 @@
     std::vector<std::string> bad_paths = service.badPaths();
     if (bad_paths.size() > 0) {
         std::cerr << "These paths couldn't be opened: " << VectorX(bad_paths).join(", ");
+        std::cerr << std::endl << "Proceeding..." << std::endl;
     }
     desktop_entry_file_names_ = service.desktopEntryFileNames();
 }
@@ -158,10 +159,6 @@
 
     std::string output_file_name = options_.output_file_name;
     FileX output_file = FileX(output_file_name);
-    if (output_file.existsAsDirectory()) {
-        std::cerr << messages::outputPathBlockedByDirectory(output_file_name) << std::endl;
-        exit(1);
-    }
     if (output_file.exists()) {
         std::string backup_file_name = output_file_name + "." + timex::currentTimeAsTimestamp() + ".bak";
         output_file.moveTo(backup_file_name);
diff -Naur mjwm-4.0.0/src/amm_options.cc mjwm-070e95eed4f34099d6adb8a4d294b03da69d186f/src/amm_options.cc
--- mjwm-4.0.0/src/amm_options.cc	2014-11-15 18:14:15.000000000 +0100
+++ mjwm-070e95eed4f34099d6adb8a4d294b03da69d186f/src/amm_options.cc	2014-11-09 14:18:15.000000000 +0100
@@ -22,7 +22,7 @@
 #include "stringx.h"
 
 namespace amm {
-AmmOptions AmmOptions::Default(std::string home, std::string language)
+AmmOptions AmmOptions::Default(std::string home)
 {
     AmmOptions amm_options;
     amm_options.is_parsed = false;
@@ -33,7 +33,6 @@
     amm_options.summary_type = "normal";
     amm_options.output_file_name = StringX(home).terminateWith("/") + (".jwmrc-mjwm");
     amm_options.icon_theme_name = "hicolor";
-    amm_options.language = language;
     return amm_options;
 }
 } // namespace amm
diff -Naur mjwm-4.0.0/src/command_line_options_parser.cc mjwm-070e95eed4f34099d6adb8a4d294b03da69d186f/src/command_line_options_parser.cc
--- mjwm-4.0.0/src/command_line_options_parser.cc	2014-11-15 18:14:15.000000000 +0100
+++ mjwm-070e95eed4f34099d6adb8a4d294b03da69d186f/src/command_line_options_parser.cc	2014-11-09 14:18:15.000000000 +0100
@@ -27,10 +27,10 @@
 
 namespace amm {
 
-AmmOptions CommandLineOptionsParser::parse(int argc, char* const* argv)
+AmmOptions CommandLineOptionsParser::parse(int argc, char* const* argv, std::string home)
 {
     allowMultipleEntries();
-    AmmOptions amm_options = AmmOptions::Default(home_, language_);
+    AmmOptions amm_options = AmmOptions::Default(home);
 
     int option_index = 0;
     int help_flag = 0;
diff -Naur mjwm-4.0.0/src/system_environment.cc mjwm-070e95eed4f34099d6adb8a4d294b03da69d186f/src/system_environment.cc
--- mjwm-4.0.0/src/system_environment.cc	2014-11-15 18:14:15.000000000 +0100
+++ mjwm-070e95eed4f34099d6adb8a4d294b03da69d186f/src/system_environment.cc	2014-11-09 14:18:15.000000000 +0100
@@ -24,10 +24,6 @@
 
 #include "stringx.h"
 
-
-
-#include <iostream>
-
 namespace amm {
 
 SystemEnvironment::SystemEnvironment()
@@ -50,14 +46,6 @@
     } else {
         xdg_data_dirs_ = "/usr/local/share:/usr/share";
     }
-
-    language_ = getLanguageWith(std::getenv("LANGUAGE"));
-    if (language_ == "")  {
-        language_ = getLanguageWith(std::getenv("LC_ALL"));
-    }
-    if (language_ == "") {
-        language_ = getLanguageWith(std::getenv("LANG"));
-    }
 }
 
 std::vector<std::string> SystemEnvironment::xdgDataDirectories() const
@@ -93,14 +81,4 @@
     return directories;
 }
 
-std::string SystemEnvironment::getLanguageWith(const char *raw)
-{
-    if (raw == NULL) {
-        return "";
-    }
-
-    std::string without_encoding = StringX(raw).split(".")[0];
-    return StringX(without_encoding).split("_")[0];
-}
-
 } // namespace amm
diff -Naur mjwm-4.0.0/test/command_line_options_parser_test.cc mjwm-070e95eed4f34099d6adb8a4d294b03da69d186f/test/command_line_options_parser_test.cc
--- mjwm-4.0.0/test/command_line_options_parser_test.cc	2014-11-15 18:14:15.000000000 +0100
+++ mjwm-070e95eed4f34099d6adb8a4d294b03da69d186f/test/command_line_options_parser_test.cc	2014-11-09 14:18:15.000000000 +0100
@@ -29,12 +29,11 @@
 SCENARIO("Command-line arguments default parse", "[commandlineoptions]") {
     GIVEN("command line options") {
         std::string home = "/home/mjwm";
-        std::string language = "hn";
-        CommandLineOptionsParser parser(home, language);
+        CommandLineOptionsParser parser;
 
         WHEN("parsing default") {
             char* argv[] = {strdup("amm"), 0};
-            AmmOptions options = parser.parse(1, argv);
+            AmmOptions options = parser.parse(1, argv, home);
 
             THEN("the parsing succeeds") {
                 REQUIRE(options.is_parsed);
@@ -80,8 +79,8 @@
                 REQUIRE(options.summary_type == "normal");
             }
 
-            THEN("its language is the supplied one") {
-                REQUIRE(options.language == language);
+            THEN("its language is empty") {
+                REQUIRE(options.language == "");
             }
         }
     }
@@ -90,12 +89,11 @@
 SCENARIO("Command-line arguments parse with flags", "[commandlineoptions]") {
     GIVEN("command line options") {
         std::string home = "/home/mjwm";
-        std::string language = "hn";
-        CommandLineOptionsParser parser(home, language);
+        CommandLineOptionsParser parser;
 
         WHEN("parsing --help") {
             char* argv[] = {strdup("amm"), strdup("--help"), 0};
-            AmmOptions options = parser.parse(2, argv);
+            AmmOptions options = parser.parse(2, argv, home);
 
             THEN("its help flag is on") {
                 REQUIRE(options.is_help);
@@ -104,7 +102,7 @@
 
         WHEN("parsing --version") {
             char* argv[] = {strdup("amm"), strdup("--version"), 0};
-            AmmOptions options = parser.parse(2, argv);
+            AmmOptions options = parser.parse(2, argv, home);
 
             THEN("its version flag is on") {
                 REQUIRE(options.is_version);
@@ -113,7 +111,7 @@
 
         WHEN("parsing --iconize") {
             char* argv[] = {strdup("amm"), strdup("--iconize"), 0};
-            AmmOptions options = parser.parse(2, argv);
+            AmmOptions options = parser.parse(2, argv, home);
 
             THEN("its iconize flag is on") {
                 REQUIRE(options.is_iconize);
@@ -122,7 +120,7 @@
 
         WHEN("parsing --iconize=Faenza") {
             char* argv[] = {strdup("amm"), strdup("--iconize=Faenza"), 0};
-            AmmOptions options = parser.parse(2, argv);
+            AmmOptions options = parser.parse(2, argv, home);
 
             THEN("its iconize flag is on") {
                 REQUIRE(options.is_iconize);
@@ -138,12 +136,11 @@
 SCENARIO("Command-line arguments parse options", "[commandlineoptions]") {
     GIVEN("command line options") {
         std::string home = "/home/mjwm";
-        std::string language = "hn";
-        CommandLineOptionsParser parser(home, language);
+        CommandLineOptionsParser parser;
 
         WHEN("parsing --output-file") {
             char* argv[] = {strdup("amm"), strdup("--output-file"), strdup("menu.out"), 0};
-            AmmOptions options = parser.parse(3, argv);
+            AmmOptions options = parser.parse(3, argv, home);
 
             THEN("its output-file is set to the given value") {
                 REQUIRE(options.output_file_name == "menu.out");
@@ -152,7 +149,7 @@
 
         WHEN("parsing -o") {
             char* argv[] = {strdup("amm"), strdup("-o"), strdup("menu.out"), 0};
-            AmmOptions options = parser.parse(3, argv);
+            AmmOptions options = parser.parse(3, argv, home);
 
             THEN("its output-file is set to the given value") {
                 REQUIRE(options.output_file_name == "menu.out");
@@ -161,7 +158,7 @@
 
         WHEN("parsing --input-directory") {
             char* argv[] = {strdup("amm"), strdup("--input-directory"), strdup("/usr/share/applications:/usr/local/share/applications"), 0};
-            AmmOptions options = parser.parse(3, argv);
+            AmmOptions options = parser.parse(3, argv, home);
 
             THEN("its input-directories is set to the given values") {
                 std::vector<std::string> input_directory_names = options.input_directory_names;
@@ -178,7 +175,7 @@
 
         WHEN("parsing -i") {
             char* argv[] = {strdup("amm"), strdup("-i"), strdup("/usr/share/applications:/usr/local/share/applications"), 0};
-            AmmOptions options = parser.parse(3, argv);
+            AmmOptions options = parser.parse(3, argv, home);
 
             THEN("its input-directories is set to the given values") {
                 std::vector<std::string> input_directory_names = options.input_directory_names;
@@ -191,7 +188,7 @@
 
         WHEN("parsing --category-file") {
             char* argv[] = {strdup("amm"), strdup("--category-file"), strdup("default.mjwm"), 0};
-            AmmOptions options = parser.parse(3, argv);
+            AmmOptions options = parser.parse(3, argv, home);
 
             THEN("its category-file is set to the given value") {
                 REQUIRE(options.category_file_name == "default.mjwm");
@@ -200,7 +197,7 @@
 
         WHEN("parsing -c") {
             char* argv[] = {strdup("amm"), strdup("-c"), strdup("default.mjwm"), 0};
-            AmmOptions options = parser.parse(3, argv);
+            AmmOptions options = parser.parse(3, argv, home);
 
             THEN("its category-file is set to the given value") {
                 REQUIRE(options.category_file_name == "default.mjwm");
@@ -209,7 +206,7 @@
 
         WHEN("parsing --summary long") {
             char* argv[] = {strdup("amm"), strdup("--summary"), strdup("long"), 0};
-            AmmOptions options = parser.parse(3, argv);
+            AmmOptions options = parser.parse(3, argv, home);
 
             THEN("its summary is set to long") {
                 REQUIRE(options.summary_type == "long");
@@ -218,7 +215,7 @@
 
         WHEN("parsing --language bn") {
             char* argv[] = {strdup("amm"), strdup("--language"), strdup("bn"), 0};
-            AmmOptions options = parser.parse(3, argv);
+            AmmOptions options = parser.parse(3, argv, home);
 
             THEN("its language is set to bn") {
                 REQUIRE(options.language == "bn");
@@ -231,12 +228,11 @@
 SCENARIO("Command-line arguments parse failure", "[commandlineoptions]") {
     GIVEN("command line options") {
         std::string home = "/home/mjwm";
-        std::string language = "hn";
-        CommandLineOptionsParser parser(home, language);
+        CommandLineOptionsParser parser;
 
         WHEN("parsing a bad option") {
             char* argv[] = {strdup("amm"), strdup("--bad-option"), strdup("default.mjwm"), 0};
-            AmmOptions options = parser.parse(3, argv);
+            AmmOptions options = parser.parse(3, argv, home);
 
             THEN("the parsing fails") {
                 REQUIRE(!options.is_parsed);
@@ -245,7 +241,7 @@
 
         WHEN("parsing a missing mandatory option") {
             char* argv[] = {strdup("amm"), strdup("-c"), 0};
-            AmmOptions options = parser.parse(2, argv);
+            AmmOptions options = parser.parse(2, argv, home);
 
             THEN("the parsing fails") {
                 REQUIRE(!options.is_parsed);
