Description: Port to GtkGrid from deprecated GtkTable.
Origin: upstream, no
Bug-Ubuntu: https://bugs.launchpad.net/ubuntu/+source/gnomeradio/+bug/1018398
Author: Pojar George <geoubuntu@gmail.com> 
Forwarded: no
Index: gnomeradio-1.8/src/prefs.c
===================================================================
--- gnomeradio-1.8.orig/src/prefs.c
+++ gnomeradio-1.8/src/prefs.c
@@ -35,6 +35,7 @@ extern gboolean main_visible;
 static GtkWidget *device_entry;
 static GtkWidget *mixer_combo;
 static GtkWidget *mute_on_exit_cb;
+static GtkWidget *delete_button;
 static GtkWidget *list_view;
 static GtkListStore *list_store;
 static GtkTreeSelection *selection;
@@ -333,7 +334,7 @@ static void add_button_clicked_cb(GtkWid
 }
 
 
-static void del_button_clicked_cb(GtkWidget *widget, gpointer data)
+static void delete_button_clicked_cb(GtkWidget *widget, gpointer data)
 {
 	GtkTreePath *path = NULL;
 	GtkTreeViewColumn *focus_column = NULL;
@@ -389,7 +390,7 @@ static void destination_button_clicked_c
 static gboolean list_view_key_press_event_cb(GtkWidget *widget, GdkEventKey *event, gpointer user_data)
 {
 	if (event->keyval == GDK_KEY_Delete)
-		del_button_clicked_cb(widget, user_data);
+		delete_button_clicked_cb(widget, user_data);
 	if (event->keyval == GDK_KEY_Insert)
 		add_button_clicked_cb(widget, user_data);
 	
@@ -475,8 +476,7 @@ static void freq_cell_edited_cb(GtkCellR
 	gtk_tree_path_free(path);	
 }	
 
-static void
-list_view_cursor_changed_cb(GtkWidget *widget, gpointer data)
+static void list_view_cursor_changed_cb(GtkWidget *widget, gpointer data)
 {
 	int *row;
 	GtkTreePath *path = NULL;
@@ -494,6 +494,15 @@ list_view_cursor_changed_cb(GtkWidget *w
 	return;
 }
 
+static void list_view_selection_changed_cb(GtkWidget *widget, gpointer data)
+{
+	gboolean sel;
+
+	sel = gtk_tree_selection_get_selected(selection, NULL, NULL);
+
+	gtk_widget_set_sensitive(delete_button, sel);
+}
+
 static void free_string_list(GList *list)
 {
 	if (!list) return;
@@ -504,23 +513,21 @@ static void free_string_list(GList *list
 GtkWidget* prefs_window(GtkWidget *app)
 {
 	GtkWidget *dialog;
-	GtkWidget *box, *sbox, *pbox, *rbox;
-	GtkWidget *settings_box, *presets_box, *record_box;
+	GtkWidget *box;
 	GtkWidget *settings_label, *presets_label, *record_label;
 	GtkWidget *s_indent_label, *p_indent_label, *r_indent_label;
 	GtkWidget *destination_label;
 	GtkWidget *destination_button;
 	GtkWidget *profile_combo;
 	GtkWidget *mixer_eb, *profile_eb;
-	GtkWidget *preset_box;
-	GtkWidget *settings_table, *record_table;
+	GtkWidget *grid;
 	GtkWidget *device_label, *mixer_label;
 	GtkWidget *button_box;
-	GtkWidget *add_button, *del_button;
+	GtkWidget *add_button, *add_pixmap, *delete_pixmap;
 	GtkWidget *scrolled_window;
 	GtkCellRenderer *cellrenderer;
 	GtkTreeViewColumn *list_column;
-	GList *mixer_devs, *profiles, *ptr;
+	GList *mixer_devs, *ptr;
 	gint i, active;
 	char *settings_hdr, *presets_hdr, *record_hdr;
 	preset* ps;
@@ -534,60 +541,35 @@ GtkWidget* prefs_window(GtkWidget *app)
 	gtk_window_set_resizable(GTK_WINDOW(dialog), FALSE);
 	gtk_dialog_set_default_response(GTK_DIALOG(dialog), GTK_RESPONSE_CLOSE);
 
-	box = gtk_box_new(GTK_ORIENTATION_VERTICAL, 18);
-	gtk_container_set_border_width(GTK_CONTAINER(box), 12);
+	box = gtk_box_new(GTK_ORIENTATION_VERTICAL, 15);
+	gtk_container_set_border_width(GTK_CONTAINER(box), 10);
 	gtk_box_pack_start(GTK_BOX(gtk_dialog_get_content_area(GTK_DIALOG(dialog))), box, TRUE, TRUE, 0);
 	
-	settings_box = gtk_box_new(GTK_ORIENTATION_VERTICAL, 6);
-	gtk_box_pack_start(GTK_BOX(box), settings_box, TRUE, TRUE, 0);
+	grid = gtk_grid_new();
+	gtk_grid_set_row_spacing(GTK_GRID(grid), 5);
+	gtk_grid_set_column_spacing(GTK_GRID(grid), 20);
+	gtk_box_pack_start(GTK_BOX(box), grid, TRUE, TRUE, 0);
 
+	/* The general settings part */
 	settings_hdr = g_strconcat("<span weight=\"bold\">", _("General Settings"), "</span>", NULL);
 	settings_label = gtk_label_new(settings_hdr);
-	gtk_misc_set_alignment(GTK_MISC(settings_label), 0, 0.5);
+	gtk_widget_set_halign(settings_label, GTK_ALIGN_START);
 	gtk_label_set_use_markup(GTK_LABEL(settings_label), TRUE);
 	g_free(settings_hdr);
-	gtk_box_pack_start(GTK_BOX(settings_box), settings_label, TRUE, TRUE, 0);
-
-	presets_box = gtk_box_new(GTK_ORIENTATION_VERTICAL, 6);
-	gtk_box_pack_start(GTK_BOX(box), presets_box, TRUE, TRUE, 0);
-
-	presets_hdr = g_strconcat("<span weight=\"bold\">", _("Presets"), "</span>", NULL);
-	presets_label = gtk_label_new(presets_hdr);
-	gtk_misc_set_alignment(GTK_MISC(presets_label), 0, 0.5);
-	gtk_label_set_use_markup(GTK_LABEL(presets_label), TRUE);
-	g_free(presets_hdr);
-	gtk_box_pack_start(GTK_BOX(presets_box), presets_label, TRUE, TRUE, 0);
+	gtk_grid_attach(GTK_GRID(grid), settings_label, 0, 0, 2, 1);
 
-	record_box = gtk_box_new(GTK_ORIENTATION_VERTICAL, 6);
-	gtk_box_pack_start(GTK_BOX(box), record_box, TRUE, TRUE, 0);
+	s_indent_label = gtk_label_new("");
+	gtk_grid_attach(GTK_GRID(grid), s_indent_label, 0, 1, 1, 3);
 
-	record_hdr = g_strconcat("<span weight=\"bold\">", _("Record Settings"), "</span>", NULL);
-	record_label = gtk_label_new(record_hdr);
-	gtk_misc_set_alignment(GTK_MISC(record_label), 0, 0.5);
-	gtk_label_set_use_markup(GTK_LABEL(record_label), TRUE);
-	g_free(record_hdr);
-	gtk_box_pack_start(GTK_BOX(record_box), record_label, TRUE, TRUE, 0);
-
-	/* The general settings part */
-	sbox = gtk_box_new(GTK_ORIENTATION_HORIZONTAL, 0);
-	gtk_box_pack_start(GTK_BOX(settings_box), sbox, TRUE, TRUE, 0);
-	s_indent_label = gtk_label_new("    ");
-	gtk_box_pack_start(GTK_BOX(sbox), s_indent_label, FALSE, FALSE, 0);
-	
-	settings_table = gtk_table_new(3, 2, FALSE);
-	gtk_table_set_row_spacings(GTK_TABLE(settings_table), 5);
-	gtk_table_set_col_spacings(GTK_TABLE(settings_table), 15);
-	gtk_box_pack_start(GTK_BOX(sbox), settings_table, TRUE, TRUE, 0);
-	
 	device_label = gtk_label_new(_("Radio Device:"));
-	gtk_misc_set_alignment(GTK_MISC(device_label), 0.0f, 0.5f); 
+	gtk_widget_set_halign(device_label, GTK_ALIGN_START);
 	device_entry = gtk_entry_new();
 	gtk_entry_set_text(GTK_ENTRY(device_entry), settings.device);
-	gtk_table_attach_defaults(GTK_TABLE(settings_table), device_label, 0, 1, 0, 1);
-	gtk_table_attach_defaults(GTK_TABLE(settings_table), device_entry, 1, 2, 0, 1);
+	gtk_grid_attach(GTK_GRID(grid), device_label, 1, 1, 1, 1);
+	gtk_grid_attach(GTK_GRID(grid), device_entry, 2, 1, 1, 1);
 
 	mixer_label = gtk_label_new(_("Mixer Source:"));
-	gtk_misc_set_alignment(GTK_MISC(mixer_label), 0.0f, 0.5f);
+	gtk_widget_set_halign(mixer_label, GTK_ALIGN_START);
 	mixer_eb = gtk_event_box_new();
 	mixer_combo = gtk_combo_box_text_new();
 	gtk_container_add(GTK_CONTAINER(mixer_eb), mixer_combo);
@@ -600,13 +582,13 @@ GtkWidget* prefs_window(GtkWidget *app)
 	gtk_combo_box_set_active(GTK_COMBO_BOX(mixer_combo), active);
 	g_object_set_data_full(G_OBJECT(mixer_combo), "mixer_devs", mixer_devs, (GDestroyNotify)free_string_list);
 	
-	gtk_table_attach_defaults(GTK_TABLE(settings_table), mixer_label, 0, 1, 1, 2);
-	gtk_table_attach_defaults(GTK_TABLE(settings_table), mixer_eb, 1, 2, 1, 2);
+	gtk_grid_attach(GTK_GRID(grid), mixer_label, 1, 2, 1, 1);
+	gtk_grid_attach(GTK_GRID(grid), mixer_eb, 2, 2, 1, 1);
 
-	mute_on_exit_cb = gtk_check_button_new_with_label(_("Mute on exit?"));
+	mute_on_exit_cb = gtk_check_button_new_with_label(_("Mute on exit"));
 	gtk_toggle_button_set_active(GTK_TOGGLE_BUTTON(mute_on_exit_cb), settings.mute_on_exit);
 
-	gtk_table_attach_defaults(GTK_TABLE(settings_table), mute_on_exit_cb, 0, 2, 2, 3);
+	gtk_grid_attach(GTK_GRID(grid), mute_on_exit_cb, 1, 3, 1, 1);
 
 	g_signal_connect(G_OBJECT(device_entry), "hide", G_CALLBACK(device_entry_activate_cb), app);
 	g_signal_connect(G_OBJECT(device_entry), "activate", G_CALLBACK(device_entry_activate_cb), NULL);
@@ -618,27 +600,31 @@ GtkWidget* prefs_window(GtkWidget *app)
 	_("Choose the mixer source (line, line1, etc.) that is able to control the volume of your radio"));
 	gtk_widget_set_tooltip_text(mute_on_exit_cb, _("If unchecked, gnomeradio won't mute after exiting"));
 
-	
 	/* The presets part */
-	pbox = gtk_box_new(GTK_ORIENTATION_HORIZONTAL, 0);
-	gtk_box_pack_start(GTK_BOX(presets_box), pbox, TRUE, TRUE, 0);
-	p_indent_label = gtk_label_new("    ");
-	gtk_box_pack_start(GTK_BOX(pbox), p_indent_label, FALSE, FALSE, 0);
+	presets_hdr = g_strconcat("<span weight=\"bold\">", _("Presets"), "</span>", NULL);
+	presets_label = gtk_label_new(presets_hdr);
+	gtk_widget_set_halign(presets_label, GTK_ALIGN_START);
+	gtk_label_set_use_markup(GTK_LABEL(presets_label), TRUE);
+	g_free(presets_hdr);
+	gtk_grid_attach(GTK_GRID(grid), presets_label, 0, 4, 2, 1);
 
-	preset_box = gtk_box_new(GTK_ORIENTATION_VERTICAL, 10);
-	gtk_box_pack_start(GTK_BOX(pbox), preset_box, TRUE, TRUE, 0);
+	p_indent_label = gtk_label_new("");
+	gtk_grid_attach(GTK_GRID(grid), p_indent_label, 0, 5, 1, 2);
 
 	scrolled_window = gtk_scrolled_window_new(NULL, NULL);
+	gtk_scrolled_window_set_min_content_height(GTK_SCROLLED_WINDOW(scrolled_window), 75);
 	list_store = gtk_list_store_new(2, G_TYPE_STRING, G_TYPE_STRING);
 	list_view = gtk_tree_view_new_with_model(GTK_TREE_MODEL(list_store));
-	gtk_container_add(GTK_CONTAINER(scrolled_window), list_view);
+	gtk_tree_view_set_rules_hint (GTK_TREE_VIEW(list_view), TRUE);
 	gtk_scrolled_window_set_shadow_type(GTK_SCROLLED_WINDOW(scrolled_window), GTK_SHADOW_IN);
 	gtk_scrolled_window_set_policy (GTK_SCROLLED_WINDOW (scrolled_window), GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);
-	gtk_widget_set_size_request(list_view, 200, 150);
 	gtk_tree_view_set_headers_visible(GTK_TREE_VIEW(list_view), FALSE);
 	
 	selection = gtk_tree_view_get_selection(GTK_TREE_VIEW(list_view));
 	gtk_tree_selection_set_mode(selection, GTK_SELECTION_SINGLE);
+	gtk_container_add(GTK_CONTAINER(scrolled_window), list_view);
+	g_signal_connect(G_OBJECT(selection), "changed", G_CALLBACK(list_view_selection_changed_cb), list_view);
+
 	/*gtk_tree_selection_select_path(selection, gtk_tree_path_new_from_string("0"));
 	gtk_tree_selection_set_select_function(selection, (GtkTreeSelectionFunc)list_view_select_cb, NULL, NULL);*/
 	
@@ -652,22 +638,30 @@ GtkWidget* prefs_window(GtkWidget *app)
 
 	cellrenderer = gtk_cell_renderer_text_new();
 	g_object_set(G_OBJECT(cellrenderer), "mode", GTK_CELL_RENDERER_MODE_EDITABLE, NULL);
-	g_object_set(G_OBJECT(cellrenderer), "xalign", 1.0f, NULL);
+	g_object_set(G_OBJECT(cellrenderer), "xalign", 1.0, NULL);
 	g_object_set(G_OBJECT(GTK_CELL_RENDERER_TEXT(cellrenderer)), "editable", TRUE, NULL);
 	list_column = gtk_tree_view_column_new_with_attributes(NULL, cellrenderer, "text", 1, NULL);
 	gtk_tree_view_append_column(GTK_TREE_VIEW(list_view), list_column);
 	g_signal_connect(G_OBJECT(cellrenderer), "edited", G_CALLBACK(freq_cell_edited_cb), NULL);
 
-	button_box = gtk_box_new(GTK_ORIENTATION_HORIZONTAL, 12);
+	button_box = gtk_box_new(GTK_ORIENTATION_HORIZONTAL, 5);
 
-	add_button = gtk_button_new_from_stock(GTK_STOCK_ADD);
-	del_button = gtk_button_new_from_stock(GTK_STOCK_DELETE);
+	add_button = gtk_button_new();
+	add_pixmap = gtk_image_new_from_stock(GTK_STOCK_ADD, GTK_ICON_SIZE_SMALL_TOOLBAR);
+	gtk_button_set_relief (GTK_BUTTON (add_button), GTK_RELIEF_NONE);
+	delete_button = gtk_button_new();
+	delete_pixmap = gtk_image_new_from_stock(GTK_STOCK_REMOVE, GTK_ICON_SIZE_SMALL_TOOLBAR);
+	gtk_button_set_relief (GTK_BUTTON (delete_button), GTK_RELIEF_NONE);
+	gtk_widget_set_sensitive(delete_button, FALSE);
 	
-	gtk_box_pack_end(GTK_BOX(button_box), del_button, FALSE, FALSE, 0);
+	gtk_box_pack_end(GTK_BOX(button_box), delete_button, FALSE, FALSE, 0);
 	gtk_box_pack_end(GTK_BOX(button_box), add_button, FALSE, FALSE, 0);
+
+	gtk_container_add(GTK_CONTAINER(add_button), add_pixmap);
+	gtk_container_add(GTK_CONTAINER(delete_button), delete_pixmap);
 	
-	gtk_box_pack_start(GTK_BOX(preset_box), scrolled_window, TRUE, TRUE, 0);
-	gtk_box_pack_start(GTK_BOX(preset_box), button_box, TRUE, TRUE, 0);
+	gtk_grid_attach(GTK_GRID(grid), scrolled_window, 1, 5, 2, 2);
+	gtk_grid_attach(GTK_GRID(grid), button_box, 1, 7, 2, 1);
 
 	for (i=0;i<g_list_length(settings.presets);i++) {
 		GtkTreeIter iter = {0};
@@ -680,46 +674,48 @@ GtkWidget* prefs_window(GtkWidget *app)
 	}
 
 	g_signal_connect(G_OBJECT(add_button), "clicked", G_CALLBACK(add_button_clicked_cb), NULL);
-	g_signal_connect(G_OBJECT(del_button), "clicked", G_CALLBACK(del_button_clicked_cb), NULL);
+	g_signal_connect(G_OBJECT(delete_button), "clicked", G_CALLBACK(delete_button_clicked_cb), NULL);
 	g_signal_connect(G_OBJECT(list_view), "key-press-event", G_CALLBACK(list_view_key_press_event_cb), NULL);
 	g_signal_connect(G_OBJECT(list_view), "cursor-changed", G_CALLBACK(list_view_cursor_changed_cb), NULL);
 
-	gtk_widget_set_tooltip_text(add_button, _("Add a new preset"));
-	gtk_widget_set_tooltip_text(del_button, _("Remove preset from List"));
+	gtk_widget_set_tooltip_text(add_button, _("Add preset"));
+	gtk_widget_set_tooltip_text(delete_button, _("Remove preset"));
 
 
 	/* The record settings part */
-	rbox = gtk_box_new(GTK_ORIENTATION_HORIZONTAL, 0);
-	gtk_box_pack_start(GTK_BOX(record_box), rbox, TRUE, TRUE, 0);
-	r_indent_label = gtk_label_new("    ");
-	gtk_box_pack_start(GTK_BOX(rbox), r_indent_label, FALSE, FALSE, 0);
-
-	record_table = gtk_table_new(2, 2, FALSE);
-	gtk_table_set_col_spacings(GTK_TABLE(record_table), 15);
-	gtk_table_set_row_spacings(GTK_TABLE(record_table), 5);
-	
-	destination_label = gtk_label_new(_("Destination directory:"));
-	gtk_misc_set_alignment(GTK_MISC(destination_label), 0.0f, 0.5f);
+	record_hdr = g_strconcat("<span weight=\"bold\">", _("Record Settings"), "</span>", NULL);
+	record_label = gtk_label_new(record_hdr);
+	gtk_widget_set_halign(record_label, GTK_ALIGN_START);
+	gtk_label_set_use_markup(GTK_LABEL(record_label), TRUE);
+	g_free(record_hdr);
+	gtk_grid_attach(GTK_GRID(grid), record_label, 0, 8, 2, 1);
+
+	r_indent_label = gtk_label_new("");
+	gtk_grid_attach(GTK_GRID(grid), r_indent_label, 0, 9, 1, 2);
+
+	destination_label = gtk_label_new(_("Destination:"));
+	gtk_widget_set_halign(destination_label, GTK_ALIGN_START);
 
 	destination_button = gtk_file_chooser_button_new(
 		_("Select a folder"), GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER);
 	gtk_file_chooser_set_filename(GTK_FILE_CHOOSER(destination_button), rec_settings.destination);
 	
 	profile_eb = gtk_event_box_new();
+	gtk_widget_set_hexpand(profile_eb, TRUE);
+	gtk_widget_set_halign(profile_eb, GTK_ALIGN_FILL);
 	profile_combo = gm_audio_profile_choose_new();
 	gtk_container_add(GTK_CONTAINER(profile_eb), profile_combo);
 	gm_audio_profile_choose_set_active(profile_combo, rec_settings.profile);
 
-	gtk_table_attach_defaults(GTK_TABLE(record_table), destination_label, 0, 1, 0, 1);
-	gtk_table_attach_defaults(GTK_TABLE(record_table), destination_button, 1, 2, 0, 1);
-	gtk_table_attach_defaults(GTK_TABLE(record_table), profile_eb, 0, 2, 1, 2);
+	gtk_grid_attach(GTK_GRID(grid), destination_label, 1, 9, 1, 1);
+	gtk_grid_attach(GTK_GRID(grid), destination_button, 2, 9, 1, 1);
+	gtk_grid_attach(GTK_GRID(grid), profile_eb, 1, 10, 2, 1);
 
 	g_signal_connect(GTK_FILE_CHOOSER(destination_button), "selection-changed", G_CALLBACK(destination_button_clicked_cb), NULL);
 	g_signal_connect(G_OBJECT(profile_combo), "changed", G_CALLBACK(profile_combo_change_cb), NULL);
 
+	gtk_widget_set_tooltip_text(destination_button, _("Choose a destination directory for recording file."));
 	gtk_widget_set_tooltip_text(profile_eb, _("Choose the Media Profile that should be used to record."));
-	
-	gtk_box_pack_start(GTK_BOX(rbox), record_table, TRUE, TRUE, 0);
 
 	gtk_widget_show_all(dialog);
 
Index: gnomeradio-1.8/src/record.c
===================================================================
--- gnomeradio-1.8.orig/src/record.c
+++ gnomeradio-1.8/src/record.c
@@ -31,7 +31,7 @@
 #include "rec_tech.h"
 #include "prefs.h"
 
-static int timeout_id = -1, wav_io_id = -1, mp3_io_id = -1;
+static int timeout_id = -1;
 static GtkWidget *file_lbl, *size_lbl;
 static GtkWidget *status_dialog;
 
@@ -101,7 +101,7 @@ GtkWidget* record_status_window(Recordin
 {
 	GtkWidget *btn_label, *btn_pixmap, *button;
 	GtkWidget *vbox, *btn_box, *hbox;
-	GtkWidget *table;
+	GtkWidget *grid;
 	GtkWidget *title, *f_lbl, *s_lbl;
 	char *text, *str;
 
@@ -113,10 +113,10 @@ GtkWidget* record_status_window(Recordin
 	vbox = gtk_box_new(GTK_ORIENTATION_VERTICAL, 5);
 	gtk_container_set_border_width(GTK_CONTAINER(vbox), 6);
 
-	table = gtk_table_new(3, 2, FALSE);
-	gtk_table_set_row_spacings(GTK_TABLE(table), 10);	
-	gtk_table_set_col_spacings(GTK_TABLE(table), 12);	
-	gtk_container_set_border_width(GTK_CONTAINER(table), 6);
+	grid = gtk_grid_new();
+	gtk_grid_set_row_spacing(GTK_GRID(grid), 10);
+	gtk_grid_set_column_spacing(GTK_GRID(grid), 12);
+	gtk_container_set_border_width(GTK_CONTAINER(grid), 6);
 	
 	str = g_strdup_printf(_("Recording from station %s"), recording->station);
 	text = g_strdup_printf("<b><big>%s</big></b>", str);
@@ -137,20 +137,24 @@ GtkWidget* record_status_window(Recordin
 	
 	file_lbl = gtk_label_new("");
 	gtk_label_set_ellipsize(GTK_LABEL(file_lbl), PANGO_ELLIPSIZE_START);
+	gtk_widget_set_hexpand(file_lbl, TRUE);
+	gtk_widget_set_halign(file_lbl, GTK_ALIGN_FILL);
 	size_lbl = gtk_label_new("");
+	gtk_widget_set_hexpand(size_lbl, TRUE);
+	gtk_widget_set_halign(size_lbl, GTK_ALIGN_FILL);
 	
-	gtk_misc_set_alignment(GTK_MISC(title), 0.0f, 0.0f); 
-	gtk_misc_set_alignment(GTK_MISC(f_lbl), 1.0f, 0.5f); 
-	gtk_misc_set_alignment(GTK_MISC(s_lbl), 1.0f, 0.5f); 
-	gtk_misc_set_alignment(GTK_MISC(file_lbl), 0.0f, 0.5f); 
-	gtk_misc_set_alignment(GTK_MISC(size_lbl), 0.0f, 0.5f);
-
-	gtk_table_attach(GTK_TABLE(table), title, 0, 2, 0, 1, GTK_FILL | GTK_SHRINK, GTK_FILL | GTK_EXPAND, 0, 0);
-	gtk_table_attach(GTK_TABLE(table), f_lbl, 0, 1, 1, 2, GTK_FILL | GTK_SHRINK, GTK_FILL, 0, 0);
-	gtk_table_attach(GTK_TABLE(table), s_lbl, 0, 1, 2, 3, GTK_FILL | GTK_SHRINK, GTK_FILL, 0, 0);
+	gtk_widget_set_halign(title, GTK_ALIGN_START);
+	gtk_widget_set_halign(f_lbl, GTK_ALIGN_START);
+	gtk_widget_set_halign(s_lbl, GTK_ALIGN_START);
+	gtk_widget_set_halign(file_lbl, GTK_ALIGN_START);
+	gtk_widget_set_halign(size_lbl, GTK_ALIGN_START);
+
+	gtk_grid_attach(GTK_GRID(grid), title, 0, 0, 2, 1);
+	gtk_grid_attach(GTK_GRID(grid), f_lbl, 0, 1, 1, 1);
+	gtk_grid_attach(GTK_GRID(grid), s_lbl, 0, 2, 1, 1);
 
-	gtk_table_attach(GTK_TABLE(table), file_lbl, 1, 2, 1, 2, GTK_FILL | GTK_EXPAND, GTK_FILL, 0, 0);
-	gtk_table_attach(GTK_TABLE(table), size_lbl, 1, 2, 2, 3, GTK_FILL | GTK_EXPAND, GTK_FILL, 0, 0);
+	gtk_grid_attach(GTK_GRID(grid), file_lbl, 1, 1, 1, 1);
+	gtk_grid_attach(GTK_GRID(grid), size_lbl, 1, 2, 1, 1);
 
 	button = gtk_button_new();
 	btn_box = gtk_box_new(GTK_ORIENTATION_HORIZONTAL, 0);
@@ -165,7 +169,7 @@ GtkWidget* record_status_window(Recordin
 	hbox = gtk_box_new(GTK_ORIENTATION_HORIZONTAL, 0);
 	gtk_box_pack_end (GTK_BOX(hbox), button, TRUE, FALSE, 0);
 	
-	gtk_box_pack_start (GTK_BOX(vbox), table, TRUE, TRUE, 0);
+	gtk_box_pack_start (GTK_BOX(vbox), grid, TRUE, TRUE, 0);
 	gtk_box_pack_start (GTK_BOX(vbox), hbox, FALSE, FALSE, 0);
 
 	gtk_container_add(GTK_CONTAINER(status_dialog), vbox);
Index: gnomeradio-1.8/src/trayicon.c
===================================================================
--- gnomeradio-1.8.orig/src/trayicon.c
+++ gnomeradio-1.8/src/trayicon.c
@@ -126,7 +126,6 @@ static void tray_popup_menu (GtkStatusIc
 void create_tray_icon(GtkWidget *app)
 {
 	GdkPixbuf *pixbuf;
-	GtkWidget *eventbox;
 	GtkIconTheme *icontheme;
 	char *text;
 	
Index: gnomeradio-1.8/src/gui.c
===================================================================
--- gnomeradio-1.8.orig/src/gui.c
+++ gnomeradio-1.8/src/gui.c
@@ -157,7 +157,7 @@ static void initial_frequency_scan(GtkWi
 	gtk_container_set_border_width (GTK_CONTAINER (box), 8);
 	
 	label = gtk_label_new (NULL);
-	gtk_misc_set_alignment (GTK_MISC (label), 0, 0.5);
+	gtk_widget_set_halign (label, GTK_ALIGN_START);
 	markup = g_strdup_printf ("<span size=\"larger\" weight=\"bold\">%s</span>", _("Scanning for available stations"));
 	gtk_label_set_markup (GTK_LABEL (label), markup);
 	g_free (markup);
@@ -167,7 +167,7 @@ static void initial_frequency_scan(GtkWi
 	gtk_box_pack_start (GTK_BOX (box), data.progress, FALSE, FALSE, 0);
 
 	data.label = gtk_label_new (_("No stations found"));
-	gtk_misc_set_alignment (GTK_MISC (data.label), 0, 0.5);
+	gtk_widget_set_halign (data.label, GTK_ALIGN_START);
 	gtk_box_pack_start (GTK_BOX (box), data.label, FALSE, FALSE, 0);
 
 	gtk_container_add (GTK_CONTAINER (content_area), box);
