Description: Don't use g_list_length() to check for empty list + Use g_list_prepend()/g_list_reverse() in a loop.
Author: POJAR GEORGE <geoubuntu@gmail.com>

Index: gnomeradio-1.8/src/gui.c
===================================================================
--- gnomeradio-1.8.orig/src/gui.c
+++ gnomeradio-1.8/src/gui.c
@@ -203,7 +203,7 @@ static void initial_frequency_scan(GtkWi
 		timeout_id = 0;
 		gtk_widget_destroy (data.dialog);
 	} else {
-		if (g_list_length (data.stations) > 0) {
+		if (data.stations != NULL) {
 			GtkWidget *dialog;
 			GList *l;
 			guint num;
@@ -240,11 +240,14 @@ static void initial_frequency_scan(GtkWi
 				if (response == GTK_RESPONSE_YES) {
 					preset *ps = g_malloc0(sizeof(preset));
 					ps->title = g_strdup(_("unnamed"));
-					ps->freq = *((gfloat*)l->data);
-					settings.presets = g_list_append(settings.presets, ps);
+					ps->freq = *((gfloat*) l->data);
+					settings.presets = g_list_prepend(settings.presets, ps);
 				}
-				g_free(l->data);
-			}	
+
+				g_free (l->data);
+			}
+
+			settings.presets = g_list_reverse (settings.presets);
 		}
 	}	
 }
@@ -1358,7 +1361,7 @@ option_version_cb (const gchar * opt,
 
 int main(int argc, char* argv[])
 {
-	GList *ptr;
+	GList *l;
 	DBusGProxy *proxy;
 	GError *err = NULL;
 	gboolean do_scan = FALSE;
@@ -1433,10 +1436,11 @@ int main(int argc, char* argv[])
 	create_tray_menu(app);
 	
 	gtk_combo_box_text_append_text(GTK_COMBO_BOX_TEXT(preset_combo), _("manual"));
-	for (ptr = settings.presets; ptr; ptr = g_list_next(ptr)) {
-		preset *ps = (preset*)ptr->data;
+	for (l = settings.presets; l; l = l->next) {
+		preset *ps = (preset*) l->data;
 		gtk_combo_box_text_append_text(GTK_COMBO_BOX_TEXT(preset_combo), ps->title);
 	}
+
 	preset_combo_set_item(mom_ps);
 
 	gtk_widget_show_all(app);
Index: gnomeradio-1.8/src/prefs.c
===================================================================
--- gnomeradio-1.8.orig/src/prefs.c
+++ gnomeradio-1.8/src/prefs.c
@@ -183,8 +183,10 @@ gboolean load_settings(void)
 		else
 			ps->freq = freq;
 		g_free(buffer);
-		settings.presets = g_list_append(settings.presets, (gpointer)ps);	
+		settings.presets = g_list_prepend(settings.presets, (gpointer)ps);
 	}	
+	settings.presets = g_list_reverse(settings.presets);
+
 	mom_ps = gconf_client_get_int(client, "/apps/gnomeradio/presets/last", NULL);
 	if (mom_ps >= count)
 		mom_ps = -1;
@@ -487,7 +489,7 @@ static void remove_button_clicked_cb(Gtk
 	if (main_visible) {
 		gtk_combo_box_text_remove(GTK_COMBO_BOX_TEXT(preset_combo), *row + 1);
 		if (--mom_ps < 0) mom_ps = 0;
-		if (!g_list_length(settings.presets)) mom_ps = -1;
+		if (settings.presets == NULL) mom_ps = -1;
 		preset_combo_set_item(mom_ps);
 
 		menuitems = gtk_container_get_children(GTK_CONTAINER(tray_menu));
@@ -500,7 +502,7 @@ static void remove_button_clicked_cb(Gtk
 	gtk_tree_view_set_cursor(GTK_TREE_VIEW(list_view), path, NULL, FALSE);
 	gtk_tree_path_free(path);
 
-	if (!g_list_length(settings.presets)) {
+	if (settings.presets == NULL) {
  		gtk_widget_set_sensitive(save_button, FALSE);
 	} else {
 		gtk_widget_set_sensitive(save_button, TRUE);
@@ -846,13 +848,11 @@ static void list_view_scroll_to_active_p
 	gtk_widget_grab_focus(list_view);
 }
 
-static void free_preset_list(gpointer data, gpointer user_data)
+static void free_presets_list (gpointer data)
 {
-	preset *ps;
-
-	ps = (preset *) data;
-	g_free(ps->title);
-	g_free(ps);
+	preset *ps = (preset *) data;
+	g_free (ps->title);
+	g_free (ps);
 }
 
 /* Go through each row and add its data to the xmlDocPtr */
@@ -1204,6 +1204,7 @@ GtkWidget* prefs_window(GtkWidget *app)
 	gint i;
 	char *settings_hdr, *presets_hdr, *record_hdr;
 	preset* ps;
+	GList *l;
 	
 	dialog = gtk_dialog_new_with_buttons(_("Gnomeradio Settings"), GTK_WINDOW(app), 
 			GTK_DIALOG_MODAL | GTK_DIALOG_DESTROY_WITH_PARENT,
@@ -1319,14 +1320,16 @@ GtkWidget* prefs_window(GtkWidget *app)
 
 	g_signal_connect(G_OBJECT(cellrenderer), "edited", G_CALLBACK(freq_cell_edited_cb), NULL);
 
-	for (i = 0; i < g_list_length(settings.presets); i++) {
+	i = 0;
+	for (l = settings.presets; l != NULL; l = l->next) {
 		GtkTreeIter iter = {0};
 		char *buffer;
-		ps = g_list_nth_data(settings.presets, i);
+		ps = l->data;
 		buffer = g_strdup_printf("%0.2f", ps->freq);
 		gtk_list_store_append(list_store, &iter);
 		gtk_list_store_set(GTK_LIST_STORE(list_store), &iter, 0, ps->title, 1, buffer, -1);
 		g_free(buffer);
+		i++;
 	}
 
 	gtk_grid_attach(GTK_GRID(grid), scrolled_window, 1, 5, 2, 2);
