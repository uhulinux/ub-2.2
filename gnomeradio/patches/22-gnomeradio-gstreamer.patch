## Description: Use standard gstreamer functions to parse a description, see: https://bugzilla.gnome.org/show_bug.cgi?id=566397
## Origin: upstream, http://bugzilla-attachments.gnome.org/attachment.cgi?id=125675
## Bug-Ubuntu:
## Bug-Debian: 
## Author: Thomas Meire
## Forwarded: not-needed
Index: b/src/rec_tech.c
===================================================================
--- a/src/rec_tech.c	2012-12-03 10:14:53.722899843 +0000
+++ b/src/rec_tech.c	2012-12-03 10:14:54.942899807 +0000
@@ -24,12 +24,6 @@
 #include <unistd.h>
 #include <fcntl.h>
 
-static GstElement*
-my_gst_gconf_render_bin_from_description(const gchar * description);
-
-static GstPad*
-my_gst_bin_find_unconnected_pad(GstBin* bin, GstPadDirection direction);
-
 static void error_cb(GstBus *bus, GstMessage *message, gpointer user_data)
 {
 	GError *error = NULL;
@@ -71,7 +65,7 @@
 	g_signal_connect(G_OBJECT(bus), "message::error", G_CALLBACK(error_cb), pipeline);
 
 	char* pipeline_str = g_strdup_printf("audioconvert ! %s", gm_audio_profile_get_pipeline(profile));
-	encoder = my_gst_gconf_render_bin_from_description(pipeline_str);
+	encoder = gst_parse_bin_from_description(pipeline_str, TRUE, NULL);
 	g_free(pipeline_str);
 	if (!encoder) {
 		char *caption = g_strdup_printf(_("Could not create encoder \"%s\"."), gm_audio_profile_get_name (profile));
@@ -137,77 +131,6 @@
 	g_free(recording);
 }	
 
-/* Stolen from gst-plugins-good/ext/gconf/gconf.c */
-static GstPad *
-my_gst_bin_find_unconnected_pad (GstBin * bin, GstPadDirection direction)
-{
-  GstPad *pad = NULL;
-  GList *elements = NULL;
-  const GList *pads = NULL;
-  GstElement *element = NULL;
-
-  GST_OBJECT_LOCK (bin);
-  elements = bin->children;
-  /* traverse all elements looking for unconnected pads */
-  while (elements && pad == NULL) {
-    element = GST_ELEMENT (elements->data);
-    GST_OBJECT_LOCK (element);
-    pads = element->pads;
-    while (pads) {
-      GstPad *testpad = GST_PAD (pads->data);
-
-      /* check if the direction matches */
-      if (GST_PAD_DIRECTION (testpad) == direction) {
-        GST_OBJECT_LOCK (testpad);
-        if (GST_PAD_PEER (testpad) == NULL) {
-          GST_OBJECT_UNLOCK (testpad);
-          /* found it ! */
-          pad = testpad;
-          break;
-        }
-        GST_OBJECT_UNLOCK (testpad);
-      }
-      pads = g_list_next (pads);
-    }
-    GST_OBJECT_UNLOCK (element);
-    elements = g_list_next (elements);
-  }
-  GST_OBJECT_UNLOCK (bin);
-
-  return pad;
-}
-
-/* Stolen from gst-plugins-good/ext/gconf/gconf.c */
-static GstElement *
-my_gst_gconf_render_bin_from_description (const gchar * description)
-{
-  GstElement *bin = NULL;
-  GstPad *pad = NULL;
-  GError *error = NULL;
-  gchar *desc = NULL;
-
-  /* parse the pipeline to a bin */
-  desc = g_strdup_printf ("bin.( %s )", description);
-  bin = GST_ELEMENT (gst_parse_launch (desc, &error));
-  g_free (desc);
-  if (error) {
-    GST_ERROR ("gstgconf: error parsing pipeline %s\n%s\n",
-        description, error->message);
-    g_error_free (error);
-    return NULL;
-  }
-
-  /* find pads and ghost them if necessary */
-  if ((pad = my_gst_bin_find_unconnected_pad (GST_BIN (bin), GST_PAD_SRC))) {
-    gst_element_add_pad (bin, gst_ghost_pad_new ("src", pad));
-  }
-  if ((pad = my_gst_bin_find_unconnected_pad (GST_BIN (bin), GST_PAD_SINK))) {
-    gst_element_add_pad (bin, gst_ghost_pad_new ("sink", pad));
-  }
-  return bin;
-}
-
-
 /*
  * Miscellanelous functions
  */
