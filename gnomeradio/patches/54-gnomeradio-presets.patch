## Description: Added option for sorting preset stations with up or down arrow buttons.
## Origin: upstream, no
## Bug-Ubuntu: https://bugs.launchpad.net/ubuntu/+source/gnomeradio/+bug/1082274
## Author: Pojar George <geoubuntu@gmail.com> 
## Forwarded: no
Index: gnomeradio-1.8/src/prefs.c
===================================================================
--- gnomeradio-1.8.orig/src/prefs.c	2013-12-04 05:54:29.284004000 +0000
+++ gnomeradio-1.8/src/prefs.c	2013-12-04 05:56:36.010841202 +0000
@@ -17,6 +17,8 @@
 #include <gconf/gconf-client.h>
 #include <glib/gi18n.h>
 #include <libgnome-media-profiles/audio-profile-choose.h>
+#include <libxml/xmlmemory.h>
+#include <libxml/parser.h>
 #include <string.h>
 #include "config.h"
 #include "prefs.h"
@@ -35,7 +37,7 @@
 static GtkWidget *device_entry;
 static GtkWidget *mixer_combo;
 static GtkWidget *mute_on_exit_cb;
-static GtkWidget *delete_button;
+static GtkWidget *save_button, *move_up_button, *move_down_button, *remove_button;
 static GtkWidget *list_view;
 static GtkListStore *list_store;
 static GtkTreeSelection *selection;
@@ -79,7 +81,7 @@
 	/* Store the presets */
 	count = g_list_length(settings.presets);
 	gconf_client_set_int(client, "/apps/gnomeradio/presets/presets", count, NULL);
-	for (i=0;i<count;i++)
+	for (i = 0; i < count; i++)
 	{
 		ps = g_list_nth_data(settings.presets, i);
 		buffer = g_strdup_printf("/apps/gnomeradio/presets/%d/name", i);
@@ -161,7 +163,7 @@
 	
 	/* Load the presets */
 	count = gconf_client_get_int(client, "/apps/gnomeradio/presets/presets", NULL);
-	for (i=0;i<count;i++)
+	for (i = 0; i < count; i++)
 	{
 		ps = malloc(sizeof(preset));
 		buffer = g_strdup_printf("/apps/gnomeradio/presets/%d/name", i);
@@ -295,7 +297,6 @@
 	GtkTreeIter iter = {0};
 	GtkAdjustment* v_scb;
 	GtkTreePath *path = NULL;
-	GList* menuitems;
 	GtkWidget *menuitem;
 	
 	ps = malloc(sizeof(preset));
@@ -305,7 +306,7 @@
 	buffer = g_strdup_printf("%.2f", ps->freq);
 
 	gtk_list_store_append(list_store, &iter);
-	gtk_list_store_set(list_store, &iter, 0, ps->title, 1, buffer, -1);
+	gtk_list_store_set(GTK_LIST_STORE(list_store), &iter, 0, ps->title, 1, buffer, -1);
 
 	g_free(buffer);
 	gtk_tree_selection_unselect_all(selection);
@@ -318,7 +319,6 @@
 		mom_ps = g_list_length(settings.presets) - 1;
 		preset_combo_set_item(mom_ps);
 
-		menuitems = gtk_container_get_children(GTK_CONTAINER(tray_menu));
 		menuitem = gtk_menu_item_new_with_label(ps->title); 
 			
 		gtk_menu_shell_insert(GTK_MENU_SHELL(tray_menu), menuitem, mom_ps);		
@@ -331,10 +331,11 @@
 	g_free(buffer);
 	gtk_tree_view_set_cursor(GTK_TREE_VIEW(list_view), path, NULL, FALSE);
 	gtk_tree_path_free(path);
-}
 
+	gtk_widget_set_sensitive(save_button, TRUE);
+}
 
-static void delete_button_clicked_cb(GtkWidget *widget, gpointer data)
+static void remove_button_clicked_cb(GtkWidget *widget, gpointer data)
 {
 	GtkTreePath *path = NULL;
 	GtkTreeViewColumn *focus_column = NULL;
@@ -346,7 +347,8 @@
 	
 	gtk_tree_view_get_cursor(GTK_TREE_VIEW(list_view), &path, &focus_column);
 	
-	if (!path) return;
+	if (path == NULL)
+		return;
 
 	row = gtk_tree_path_get_indices(path);
 	g_assert(row);
@@ -375,7 +377,141 @@
 	
 	gtk_tree_path_prev(path);
 	gtk_tree_view_set_cursor(GTK_TREE_VIEW(list_view), path, NULL, FALSE);
-	gtk_tree_path_free(path);	
+	gtk_tree_path_free(path);
+
+	if (!g_list_length(settings.presets)) {
+ 		gtk_widget_set_sensitive(save_button, FALSE);
+	} else {
+		gtk_widget_set_sensitive(save_button, TRUE);
+	}
+}
+
+static void move_up_button_clicked_cb(GtkWidget * widget, gpointer data)
+{
+	GtkTreeIter iter, iter2;
+	GtkTreePath *path, *path2;
+	gint pos;
+	preset *ps;
+	int *row;
+	GList* menuitems;
+	GtkWidget *menuitem;
+
+	selection = gtk_tree_view_get_selection(GTK_TREE_VIEW(list_view));
+	gtk_tree_selection_get_selected(selection, NULL, &iter);
+	path = gtk_tree_model_get_path(GTK_TREE_MODEL(list_store), &iter);
+
+	path2 = path;
+	gtk_tree_path_prev(path2);
+
+	if (gtk_tree_model_get_iter(GTK_TREE_MODEL(list_store), &iter2, path2)) {
+		// we have a previous entry...
+		gtk_list_store_swap(GTK_LIST_STORE(GTK_TREE_MODEL(list_store)), &iter, &iter2);
+	}
+
+	row = gtk_tree_path_get_indices(path);
+	g_assert(row);
+	g_assert(*row < g_list_length(settings.presets));
+
+	ps = g_list_nth_data(settings.presets, *row);
+	g_assert(ps);
+	pos = g_list_index(settings.presets, (gpointer)ps);
+	pos++;
+
+	settings.presets = g_list_remove(settings.presets, (gpointer)ps);
+	settings.presets = g_list_insert(settings.presets, (gpointer)ps, pos);
+
+	if (main_visible) {
+		gtk_combo_box_text_remove(GTK_COMBO_BOX_TEXT(preset_combo), *row + 1);
+		gtk_combo_box_text_insert_text(GTK_COMBO_BOX_TEXT(preset_combo), *row + 2, ps->title);
+		mom_ps = *row;
+		preset_combo_set_item(mom_ps);
+
+		menuitems = gtk_container_get_children(GTK_CONTAINER(tray_menu));
+		g_assert(mom_ps < g_list_length(menuitems));
+		menuitem = g_list_nth_data(menuitems, mom_ps);
+		gtk_widget_destroy(menuitem);
+		menuitem = gtk_menu_item_new_with_label(ps->title);
+
+		gtk_menu_shell_insert(GTK_MENU_SHELL(tray_menu), menuitem, *row + 1);
+		g_signal_connect(G_OBJECT(menuitem), "activate", (GCallback)preset_menuitem_activate_cb, GINT_TO_POINTER (mom_ps));
+		gtk_widget_show(menuitem);
+	}
+
+	gtk_tree_view_scroll_to_cell(GTK_TREE_VIEW(list_view), path, NULL, FALSE, 0, 0);
+	gtk_tree_path_free(path);
+
+	if (pos - 1 <= 0) {
+		gtk_widget_set_sensitive(move_up_button, FALSE);
+	} else {
+		gtk_widget_set_sensitive(move_up_button, TRUE);
+	}
+	gtk_widget_set_sensitive(move_down_button, TRUE);
+}
+
+static void move_down_button_clicked_cb(GtkWidget * widget, gpointer data)
+{
+	GtkTreeIter iter, iter2;
+	GtkTreePath *path, *path2;
+	gint pos, count;
+	preset *ps;
+	int *row;
+	GList* menuitems;
+	GtkWidget *menuitem;
+
+	selection = gtk_tree_view_get_selection(GTK_TREE_VIEW(list_view));
+	gtk_tree_selection_get_selected(selection, NULL, &iter);
+	path = gtk_tree_model_get_path(GTK_TREE_MODEL(list_store), &iter);
+
+	path2 = path;
+	gtk_tree_path_next(path2);
+
+	if (gtk_tree_model_get_iter(GTK_TREE_MODEL(list_store), &iter2, path2)) {
+		// we have a next entry...
+		gtk_list_store_swap(GTK_LIST_STORE(GTK_TREE_MODEL(list_store)), &iter, &iter2);
+	}
+
+	row = gtk_tree_path_get_indices(path);
+	g_assert(row);
+	g_assert(*row < g_list_length(settings.presets));
+
+	ps = g_list_nth_data(settings.presets, *row);
+	g_assert(ps);
+
+	count = g_list_length(settings.presets);
+	pos = g_list_index(settings.presets, (gpointer)ps);
+	pos--;
+	if (pos == count)
+		pos = 0;
+
+	settings.presets = g_list_remove(settings.presets, (gpointer)ps);
+	settings.presets = g_list_insert(settings.presets, (gpointer)ps, pos);
+
+	if (main_visible) {
+		gtk_combo_box_text_remove(GTK_COMBO_BOX_TEXT(preset_combo), *row + 1);
+		gtk_combo_box_text_insert_text(GTK_COMBO_BOX_TEXT(preset_combo), *row, ps->title);
+		mom_ps = *row;
+		preset_combo_set_item(mom_ps);
+
+		menuitems = gtk_container_get_children(GTK_CONTAINER(tray_menu));
+		g_assert(mom_ps < g_list_length(menuitems));
+		menuitem = g_list_nth_data(menuitems, mom_ps);
+		gtk_widget_destroy(menuitem);
+		menuitem = gtk_menu_item_new_with_label(ps->title);
+
+		gtk_menu_shell_insert(GTK_MENU_SHELL(tray_menu), menuitem, *row - 1);
+		g_signal_connect(G_OBJECT(menuitem), "activate", (GCallback)preset_menuitem_activate_cb, GINT_TO_POINTER (mom_ps));
+		gtk_widget_show(menuitem);
+	}
+
+	gtk_tree_view_scroll_to_cell(GTK_TREE_VIEW(list_view), path, NULL, FALSE, 0, 0);
+	gtk_tree_path_free(path);
+
+	if (pos + 2 == gtk_tree_model_iter_n_children(GTK_TREE_MODEL(list_store), NULL)) {
+		gtk_widget_set_sensitive(move_down_button, FALSE);
+	} else {
+		gtk_widget_set_sensitive(move_down_button, TRUE);
+	}
+	gtk_widget_set_sensitive(move_up_button, TRUE);
 }
 
 static void destination_button_clicked_cb(GtkWidget *button, gpointer data)
@@ -390,13 +526,44 @@
 static gboolean list_view_key_press_event_cb(GtkWidget *widget, GdkEventKey *event, gpointer user_data)
 {
 	if (event->keyval == GDK_KEY_Delete)
-		delete_button_clicked_cb(widget, user_data);
+		remove_button_clicked_cb(widget, user_data);
 	if (event->keyval == GDK_KEY_Insert)
 		add_button_clicked_cb(widget, user_data);
 	
 	return FALSE;
 }		
 
+static gboolean button_release_cb(GtkWidget *widget, GdkEvent *event, gpointer data)
+{
+	GtkTreePath *path;
+	gint pos;
+	GdkEventButton *event_button;
+	gchar *buffer;
+
+	event_button = (GdkEventButton *) event;
+
+	gtk_tree_view_get_path_at_pos(GTK_TREE_VIEW(list_view), event_button->x, event_button->y, &path, NULL, NULL, NULL);
+	if (path != NULL) {
+		buffer = gtk_tree_path_to_string(path);
+		pos = (gint) g_strtod(buffer, NULL);
+		g_free(buffer);
+		gtk_tree_path_free(path);
+
+		if (pos == 0) {
+			gtk_widget_set_sensitive(move_up_button, FALSE);
+		} else {
+			gtk_widget_set_sensitive(move_up_button, TRUE);
+		}
+
+		if (pos + 1 == gtk_tree_model_iter_n_children(GTK_TREE_MODEL(list_store), NULL)) {
+			gtk_widget_set_sensitive(move_down_button, FALSE);
+		} else {
+			gtk_widget_set_sensitive(move_down_button, TRUE);
+		}
+	}
+	return FALSE;
+}
+
 static void name_cell_edited_cb(GtkCellRendererText *cellrenderertext, gchar *path_str, gchar *new_val, gpointer user_data)
 {
 	GtkTreePath *path = NULL;
@@ -479,18 +646,42 @@
 static void list_view_cursor_changed_cb(GtkWidget *widget, gpointer data)
 {
 	int *row;
+	preset *ps;
+	gint pos;
 	GtkTreePath *path = NULL;
 	GtkTreeViewColumn *focus_column = NULL;
 	
+	if (settings.presets == NULL)
+		return;
+
 	gtk_tree_view_get_cursor(GTK_TREE_VIEW(list_view), &path, &focus_column);
 	
-	if (!path) return;
+	if (path == NULL)
+		return;
 
 	row = gtk_tree_path_get_indices(path);
 	g_assert(row);
 
 	mom_ps = *row;
 	preset_combo_set_item(mom_ps);
+
+	ps = g_list_nth_data(settings.presets, *row);
+	g_assert(ps);
+
+	pos = g_list_index(settings.presets, (gpointer)ps);
+
+	if (pos == 0) {
+		gtk_widget_set_sensitive(move_up_button, FALSE);
+	} else {
+		gtk_widget_set_sensitive(move_up_button, TRUE);
+	}
+
+	if (pos + 1 == gtk_tree_model_iter_n_children(GTK_TREE_MODEL(list_store), NULL)) {
+		gtk_widget_set_sensitive(move_down_button, FALSE);
+	} else {
+		gtk_widget_set_sensitive(move_down_button, TRUE);
+	}
+	gtk_tree_path_free(path);
 	return;
 }
 
@@ -500,7 +691,8 @@
 
 	sel = gtk_tree_selection_get_selected(selection, NULL, NULL);
 
-	gtk_widget_set_sensitive(delete_button, sel);
+	gtk_widget_set_sensitive(remove_button, sel);
+	gtk_widget_set_sensitive(save_button, sel);
 }
 
 static void free_string_list(GList *list)
@@ -510,20 +702,338 @@
 	g_list_free(list);
 }
 
+static void free_preset_list(gpointer data, gpointer user_data)
+{
+	preset *ps;
+
+	ps = (preset *) data;
+	g_free(ps->title);
+	g_free(ps);
+}
+
+/* Go through each row and add its data to the xmlDocPtr */
+static gboolean save_to_file_foreach(GtkTreeModel *model, GtkTreePath *path, GtkTreeIter *iter, xmlNodePtr root, gpointer user_data)
+{
+	gchar *title, *freq, *position;
+	xmlNodePtr current;
+
+	/* get the data stored in the model... */
+	gtk_tree_model_get(model, iter, 0, &title, 1, &freq, -1);
+	/* ...and get the path of the current row */
+	position = gtk_tree_path_to_string(path);
+	/* create a new child of the root node... */
+	/* (note that I'm using a (guchar*) cast; this is because it's the same thing as
+	 * an (xmlChar*) cast, but easier to type) */
+	current = xmlNewChild(root, NULL, (guchar*)"station", NULL);
+	/* ...and set some properties */
+	xmlSetProp(current, (guchar*)"name", (guchar*)title);
+	xmlSetProp(current, (guchar*)"freq", (guchar*)freq);
+	xmlSetProp(current, (guchar*)"position", (guchar*)position);
+	/* free our data we retrieved from the model */
+	g_free(title);
+	g_free(freq);
+	g_free(position);
+
+	/* return FALSE to keep iterating */
+	return FALSE;
+}
+
+/* Function handle saving an xml file; calls save_to_file_foreach */
+static void save_to_file(gchar *filename)
+{
+	GtkTreeModel *model;
+	xmlDocPtr doc;
+	xmlNodePtr root;
+
+	/* create a new doc node */
+	doc = xmlNewDoc((guchar*)"1.0");
+	/* create a new root element. */
+	root = xmlNewDocNode(doc, NULL, (guchar*)"gnomeradio", NULL);
+	/* set it as the root element */
+	xmlDocSetRootElement(doc, root);
+	/* get the tree view's model... */
+	model = gtk_tree_view_get_model(GTK_TREE_VIEW(list_view));
+	/* ...and go through it with a foreach */
+	gtk_tree_model_foreach(model, (GtkTreeModelForeachFunc)save_to_file_foreach, (gpointer)root);
+	/* make sure the XML document will be indented */
+	xmlIndentTreeOutput = 1;
+	/* save the actual file */
+	xmlSaveFormatFileEnc(filename, doc, "utf-8", 1);
+	/* free the doc node */
+	xmlFreeDoc(doc);
+}
+
+/* Callback for the "Save to file" button; calls save_to_file */
+static void save_to_file_cb(GtkWidget *button, gpointer data)
+{
+	GtkWidget *dialog;
+	GtkFileFilter *file_filter_all;
+	GtkFileFilter *file_filter_xml;
+	gchar *filename;
+
+	dialog = gtk_file_chooser_dialog_new("Select file name\xE2\x80\xA6", NULL,
+						GTK_FILE_CHOOSER_ACTION_SAVE,
+						GTK_STOCK_SAVE, GTK_RESPONSE_ACCEPT,
+						GTK_STOCK_CANCEL,
+						GTK_RESPONSE_CANCEL, NULL);
+
+	file_filter_all = gtk_file_filter_new();
+	gtk_file_filter_set_name(file_filter_all, _("All Files"));
+	gtk_file_filter_add_pattern(file_filter_all, "*");
+	gtk_file_chooser_add_filter(GTK_FILE_CHOOSER(dialog), file_filter_all);
+
+	file_filter_xml = gtk_file_filter_new();
+	gtk_file_filter_set_name(file_filter_xml, _("XML Files (*.xml)"));
+	gtk_file_filter_add_pattern(file_filter_xml, "*.xml");
+	gtk_file_filter_add_pattern(file_filter_xml, "*.XML");
+	gtk_file_filter_add_mime_type(file_filter_xml, "text/xml");
+	gtk_file_chooser_add_filter(GTK_FILE_CHOOSER(dialog), file_filter_xml);
+
+	gtk_file_chooser_set_do_overwrite_confirmation(GTK_FILE_CHOOSER(dialog), TRUE);
+        gtk_file_chooser_set_filter(GTK_FILE_CHOOSER(dialog), file_filter_xml);
+	gtk_file_chooser_set_current_name(GTK_FILE_CHOOSER(dialog), "gnomeradio.xml");
+
+	if (gtk_dialog_run(GTK_DIALOG(dialog)) == GTK_RESPONSE_ACCEPT) {
+		filename = gtk_file_chooser_get_filename(GTK_FILE_CHOOSER(dialog));
+		/* Check if .xml extension is added, if not add */
+		if (!g_str_has_suffix(filename, ".xml")) {
+			char *tmp_file;
+			/* create copy of filename to release it and create a new one, using old name */
+			tmp_file = g_strdup(filename);
+			g_free(filename);
+        		filename = g_strdup_printf("%s.xml", tmp_file);
+			g_free(tmp_file);
+		}
+		save_to_file(filename);
+		g_free(filename);
+	}
+	gtk_widget_destroy(dialog);
+}
+
+/* Gets the parent of a path string.
+* passing "0:1:2" would return "0:1",
+* passing "0:1" would return "0",
+* passing "0" would return NULL */
+gchar *gtk_tree_path_string_get_parent(gchar *path)
+{
+	gchar *colon;
+
+	g_return_val_if_fail(path != NULL, NULL);
+
+	colon = g_strrstr(path, ":");
+	if (colon == NULL)
+		  return NULL;
+
+	return g_strndup(path, colon - path);
+}
+
+/* Make sure that path exists within model */
+static void gtk_tree_model_generate_path(GtkTreeModel *model, gchar *path)
+{
+	GtkTreeIter iter, parent;
+	gchar *temp;
+
+	while (TRUE) {
+		/* if this returns TRUE, then this path exists and we're fine */
+		if (gtk_tree_model_get_iter_from_string(model, &iter, path))
+			break;
+
+		temp = path;
+		path = gtk_tree_path_string_get_parent(path);
+		/* if there's no parent, then it's toplevel */
+		if (path == NULL) {
+			if (GTK_IS_TREE_STORE(model))
+				gtk_tree_store_append(GTK_TREE_STORE(model), &parent, NULL);
+			else
+				gtk_list_store_append(GTK_LIST_STORE(model), &parent);
+			gtk_tree_model_generate_path(model, temp);
+			break;
+		}
+		if (GTK_IS_TREE_STORE(model)) {
+			gtk_tree_model_generate_path(model, path);
+			gtk_tree_model_get_iter_from_string(model, &parent, path);
+			gtk_tree_store_append(GTK_TREE_STORE(model), &iter, &parent);
+		}
+	}
+}
+
+/* Function to load from an xml file */
+static void load_from_file(gchar *filename)
+{
+	xmlDocPtr doc;
+	xmlNodePtr current;
+	xmlChar *title, *freq, *position;
+	GtkTreeModel *model;
+	GtkTreePath *path = NULL;
+	GtkTreeIter iter;
+	GtkAdjustment* v_scb;
+	GList* menuitems;
+	GtkWidget *menuitem;
+
+	/* load the file */
+	doc = xmlParseFile(filename);
+	/* get the root item */
+	if (doc == NULL)
+		return;
+
+	current = xmlDocGetRootElement(doc);
+	if (current == NULL) {
+		xmlFreeDoc(doc);
+		return;
+	}
+
+	if (xmlStrcmp(current->name, (guchar*)"gnomeradio")) {
+		xmlFreeDoc(doc);
+		return;
+	}
+
+	/* remove previous presets */
+	if (settings.presets != NULL) {
+		if (main_visible) {
+			gint i, count;
+
+			count = g_list_length (settings.presets);
+			for (i = 0; i < count; i++)
+				gtk_combo_box_text_remove(GTK_COMBO_BOX_TEXT(preset_combo), 1);
+
+			menuitems = gtk_container_get_children (GTK_CONTAINER (tray_menu));
+
+			count = g_list_length (menuitems);
+			for (i = 0; i < count - 6; i++) {
+				menuitem = g_list_nth_data (menuitems, i);
+				gtk_widget_destroy (menuitem);
+			}
+       		}
+
+		gtk_list_store_clear(GTK_LIST_STORE(list_store));
+
+		g_list_free_full (settings.presets, free_presets_list);
+		settings.presets = NULL;
+       	}
+
+	/* get the tree view's model */
+	model = gtk_tree_view_get_model(GTK_TREE_VIEW(list_view));
+
+	/* iterate through the root's children items */
+	current = current->xmlChildrenNode;
+	while (current) {
+        	if(!xmlIsBlankNode(current)) {
+			/* check for the proper element name */
+			if (!xmlStrcmp(current->name, (guchar*)"station")) {
+				/* get the saved properties */
+				title = xmlGetProp(current, (guchar*)"name");
+				freq = xmlGetProp(current, (guchar*)"freq");
+				position = xmlGetProp(current, (guchar*)"position");
+
+				if( title && freq && position ) {
+					preset *ps = g_malloc0(sizeof(preset));
+					ps->title = g_strdup((gchar*)title);
+					ps->freq = atof((gchar*)freq);
+
+					settings.presets = g_list_append(settings.presets, ps);
+
+					/* make sure that the path exists */
+					gtk_tree_model_generate_path(model, (gchar*)position);
+					/* get an iter to the path */
+					gtk_tree_model_get_iter_from_string(model, &iter, (gchar*)position);
+					/* set the data */
+					gtk_list_store_set(GTK_LIST_STORE(list_store), &iter, 0, title, 1, freq, -1);
+
+					gtk_tree_selection_unselect_all(selection);
+
+					v_scb = gtk_scrollable_get_vadjustment(GTK_SCROLLABLE(list_view));
+					gtk_adjustment_set_value(v_scb, gtk_adjustment_get_upper(v_scb));
+
+					if (main_visible) {
+						gtk_combo_box_text_append_text(GTK_COMBO_BOX_TEXT(preset_combo), ps->title);
+						mom_ps = g_list_length(settings.presets) - 1;
+						preset_combo_set_item(mom_ps);
+
+						menuitem = gtk_menu_item_new_with_label(ps->title);
+
+						gtk_menu_shell_insert(GTK_MENU_SHELL(tray_menu), menuitem, mom_ps);
+						g_signal_connect(G_OBJECT(menuitem), "activate",
+								 (GCallback)preset_menuitem_activate_cb,
+								 GINT_TO_POINTER (mom_ps));
+						gtk_widget_show(menuitem);
+					}
+				}
+				/* free the data */
+				xmlFree(title);
+				xmlFree(freq);
+				xmlFree(position);
+			}
+			current = current->next;
+		}
+	}
+	/* free the doc node */
+	xmlFreeDoc(doc);
+
+	if (settings.presets == NULL)
+		return;
+
+	path = gtk_tree_model_get_path(GTK_TREE_MODEL(list_store), &iter);
+
+	gtk_tree_view_set_cursor(GTK_TREE_VIEW (list_view), path, NULL, FALSE );
+	gtk_tree_path_free(path);
+
+	gtk_widget_grab_focus(list_view);
+
+	list_view_cursor_changed_cb(list_view, NULL);
+	gtk_widget_set_sensitive(save_button, TRUE);
+	gtk_widget_set_sensitive(remove_button, TRUE);
+}
+
+/* Callback for the "Load from file" button; calls load_from_file */
+static void load_from_file_cb(GtkWidget *button, gpointer data)
+{
+	GtkWidget *dialog;
+	GtkFileFilter *file_filter_all;
+	GtkFileFilter *file_filter_xml;
+	gchar *filename;
+
+	dialog = gtk_file_chooser_dialog_new("Select file name\xE2\x80\xA6", NULL,
+						GTK_FILE_CHOOSER_ACTION_OPEN,
+						GTK_STOCK_OPEN, GTK_RESPONSE_ACCEPT,
+						GTK_STOCK_CANCEL,
+						GTK_RESPONSE_CANCEL, NULL);
+
+	file_filter_all = gtk_file_filter_new();
+	gtk_file_filter_set_name(file_filter_all, _("All Files"));
+	gtk_file_filter_add_pattern(file_filter_all, "*");
+	gtk_file_chooser_add_filter(GTK_FILE_CHOOSER(dialog), file_filter_all);
+
+	file_filter_xml = gtk_file_filter_new();
+	gtk_file_filter_set_name(file_filter_xml, _("XML Files"));
+	gtk_file_filter_add_pattern(file_filter_xml, "*.xml");
+	gtk_file_filter_add_pattern(file_filter_xml, "*.XML");
+	gtk_file_filter_add_mime_type(file_filter_xml, "text/xml");
+	gtk_file_chooser_add_filter(GTK_FILE_CHOOSER(dialog), file_filter_xml);
+
+        gtk_file_chooser_set_filter(GTK_FILE_CHOOSER(dialog), file_filter_xml);
+
+	if (gtk_dialog_run(GTK_DIALOG(dialog)) == GTK_RESPONSE_ACCEPT) {
+		filename = gtk_file_chooser_get_filename(GTK_FILE_CHOOSER(dialog));
+		load_from_file(filename);
+		g_free(filename);
+	}
+	gtk_widget_destroy(dialog);
+}
+
 GtkWidget* prefs_window(GtkWidget *app)
 {
 	GtkWidget *dialog;
 	GtkWidget *box;
+	GtkWidget *grid;
 	GtkWidget *settings_label, *presets_label, *record_label;
 	GtkWidget *s_indent_label, *p_indent_label, *r_indent_label;
 	GtkWidget *destination_label;
 	GtkWidget *destination_button;
 	GtkWidget *profile_combo;
 	GtkWidget *mixer_eb, *profile_eb;
-	GtkWidget *grid;
 	GtkWidget *device_label, *mixer_label;
 	GtkWidget *button_box;
-	GtkWidget *add_button, *add_pixmap, *delete_pixmap;
+	GtkWidget *open_button, *add_button;
 	GtkWidget *scrolled_window;
 	GtkCellRenderer *cellrenderer;
 	GtkTreeViewColumn *list_column;
@@ -613,16 +1123,22 @@
 
 	scrolled_window = gtk_scrolled_window_new(NULL, NULL);
 	gtk_scrolled_window_set_min_content_height(GTK_SCROLLED_WINDOW(scrolled_window), 75);
+	gtk_scrolled_window_set_shadow_type(GTK_SCROLLED_WINDOW(scrolled_window), GTK_SHADOW_IN);
+	gtk_scrolled_window_set_policy (GTK_SCROLLED_WINDOW (scrolled_window), GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);
+
 	list_store = gtk_list_store_new(2, G_TYPE_STRING, G_TYPE_STRING);
 	list_view = gtk_tree_view_new_with_model(GTK_TREE_MODEL(list_store));
 	gtk_tree_view_set_rules_hint (GTK_TREE_VIEW(list_view), TRUE);
-	gtk_scrolled_window_set_shadow_type(GTK_SCROLLED_WINDOW(scrolled_window), GTK_SHADOW_IN);
-	gtk_scrolled_window_set_policy (GTK_SCROLLED_WINDOW (scrolled_window), GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);
 	gtk_tree_view_set_headers_visible(GTK_TREE_VIEW(list_view), FALSE);
-	
+
 	selection = gtk_tree_view_get_selection(GTK_TREE_VIEW(list_view));
 	gtk_tree_selection_set_mode(selection, GTK_SELECTION_SINGLE);
 	gtk_container_add(GTK_CONTAINER(scrolled_window), list_view);
+
+	g_signal_connect(G_OBJECT(list_view), "button-release-event", G_CALLBACK(button_release_cb), NULL);
+	g_signal_connect(G_OBJECT(list_view), "key-press-event", G_CALLBACK(list_view_key_press_event_cb), NULL);
+	g_signal_connect(G_OBJECT(list_view), "cursor-changed", G_CALLBACK(list_view_cursor_changed_cb), NULL);
+
 	g_signal_connect(G_OBJECT(selection), "changed", G_CALLBACK(list_view_selection_changed_cb), list_view);
 
 	/*gtk_tree_selection_select_path(selection, gtk_tree_path_new_from_string("0"));
@@ -632,8 +1148,10 @@
 	g_object_set(G_OBJECT(cellrenderer), "mode", GTK_CELL_RENDERER_MODE_EDITABLE, NULL);
 	g_object_set(G_OBJECT(GTK_CELL_RENDERER_TEXT(cellrenderer)), "editable", TRUE, NULL);
 	list_column = gtk_tree_view_column_new_with_attributes(NULL, cellrenderer, "text", 0, NULL);
-	gtk_tree_view_column_set_min_width(list_column, 150);
+	gtk_tree_view_column_set_reorderable(list_column, TRUE);
+	gtk_tree_view_column_set_expand(list_column, TRUE);
 	gtk_tree_view_append_column(GTK_TREE_VIEW(list_view), list_column);
+
 	g_signal_connect(G_OBJECT(cellrenderer), "edited", G_CALLBACK(name_cell_edited_cb), NULL);
 
 	cellrenderer = gtk_cell_renderer_text_new();
@@ -641,46 +1159,86 @@
 	g_object_set(G_OBJECT(cellrenderer), "xalign", 1.0, NULL);
 	g_object_set(G_OBJECT(GTK_CELL_RENDERER_TEXT(cellrenderer)), "editable", TRUE, NULL);
 	list_column = gtk_tree_view_column_new_with_attributes(NULL, cellrenderer, "text", 1, NULL);
+	gtk_tree_view_column_set_reorderable(list_column, TRUE);
+	gtk_tree_view_column_set_expand(list_column, FALSE);
 	gtk_tree_view_append_column(GTK_TREE_VIEW(list_view), list_column);
-	g_signal_connect(G_OBJECT(cellrenderer), "edited", G_CALLBACK(freq_cell_edited_cb), NULL);
-
-	button_box = gtk_box_new(GTK_ORIENTATION_HORIZONTAL, 5);
 
-	add_button = gtk_button_new();
-	add_pixmap = gtk_image_new_from_stock(GTK_STOCK_ADD, GTK_ICON_SIZE_SMALL_TOOLBAR);
-	gtk_button_set_relief (GTK_BUTTON (add_button), GTK_RELIEF_NONE);
-	delete_button = gtk_button_new();
-	delete_pixmap = gtk_image_new_from_stock(GTK_STOCK_REMOVE, GTK_ICON_SIZE_SMALL_TOOLBAR);
-	gtk_button_set_relief (GTK_BUTTON (delete_button), GTK_RELIEF_NONE);
-	gtk_widget_set_sensitive(delete_button, FALSE);
-	
-	gtk_box_pack_end(GTK_BOX(button_box), delete_button, FALSE, FALSE, 0);
-	gtk_box_pack_end(GTK_BOX(button_box), add_button, FALSE, FALSE, 0);
-
-	gtk_container_add(GTK_CONTAINER(add_button), add_pixmap);
-	gtk_container_add(GTK_CONTAINER(delete_button), delete_pixmap);
-	
-	gtk_grid_attach(GTK_GRID(grid), scrolled_window, 1, 5, 2, 2);
-	gtk_grid_attach(GTK_GRID(grid), button_box, 1, 7, 2, 1);
+	g_signal_connect(G_OBJECT(cellrenderer), "edited", G_CALLBACK(freq_cell_edited_cb), NULL);
 
-	for (i=0;i<g_list_length(settings.presets);i++) {
+	for (i = 0; i < g_list_length(settings.presets); i++) {
 		GtkTreeIter iter = {0};
 		char *buffer;
 		ps = g_list_nth_data(settings.presets, i);
 		buffer = g_strdup_printf("%0.2f", ps->freq);
 		gtk_list_store_append(list_store, &iter);
-		gtk_list_store_set(list_store, &iter, 0, ps->title, 1, buffer, -1);
+		gtk_list_store_set(GTK_LIST_STORE(list_store), &iter, 0, ps->title, 1, buffer, -1);
 		g_free(buffer);
 	}
 
-	g_signal_connect(G_OBJECT(add_button), "clicked", G_CALLBACK(add_button_clicked_cb), NULL);
-	g_signal_connect(G_OBJECT(delete_button), "clicked", G_CALLBACK(delete_button_clicked_cb), NULL);
-	g_signal_connect(G_OBJECT(list_view), "key-press-event", G_CALLBACK(list_view_key_press_event_cb), NULL);
-	g_signal_connect(G_OBJECT(list_view), "cursor-changed", G_CALLBACK(list_view_cursor_changed_cb), NULL);
+	gtk_grid_attach(GTK_GRID(grid), scrolled_window, 1, 5, 2, 2);
+
+	button_box = gtk_box_new(GTK_ORIENTATION_HORIZONTAL, 0);
 
+	move_up_button = gtk_button_new();
+	gtk_button_set_image(GTK_BUTTON(move_up_button), gtk_image_new_from_stock(GTK_STOCK_GO_UP, GTK_ICON_SIZE_MENU));
+	gtk_button_set_relief (GTK_BUTTON (move_up_button), GTK_RELIEF_NONE);
+	gtk_widget_set_sensitive(move_up_button, FALSE);
+	gtk_widget_set_tooltip_text(move_up_button, _("Move preset up"));
+
+	g_signal_connect(G_OBJECT(move_up_button), "clicked", G_CALLBACK(move_up_button_clicked_cb), NULL);
+
+	move_down_button = gtk_button_new();
+	gtk_button_set_image(GTK_BUTTON(move_down_button), gtk_image_new_from_stock(GTK_STOCK_GO_DOWN, GTK_ICON_SIZE_MENU));
+	gtk_button_set_relief (GTK_BUTTON (move_down_button), GTK_RELIEF_NONE);
+	gtk_widget_set_sensitive(move_down_button, FALSE);
+	gtk_widget_set_tooltip_text(move_down_button, _("Move preset down"));
+
+	g_signal_connect(G_OBJECT(move_down_button), "clicked", G_CALLBACK(move_down_button_clicked_cb), NULL);
+
+	add_button = gtk_button_new();
+	gtk_button_set_image(GTK_BUTTON(add_button), gtk_image_new_from_stock(GTK_STOCK_ADD, GTK_ICON_SIZE_MENU));
+	gtk_button_set_relief (GTK_BUTTON (add_button), GTK_RELIEF_NONE);
 	gtk_widget_set_tooltip_text(add_button, _("Add preset"));
-	gtk_widget_set_tooltip_text(delete_button, _("Remove preset"));
 
+	g_signal_connect(G_OBJECT(add_button), "clicked", G_CALLBACK(add_button_clicked_cb), NULL);
+
+ 	remove_button = gtk_button_new();
+	gtk_button_set_image(GTK_BUTTON(remove_button), gtk_image_new_from_stock(GTK_STOCK_REMOVE, GTK_ICON_SIZE_MENU));
+	gtk_button_set_relief (GTK_BUTTON (remove_button), GTK_RELIEF_NONE);
+	gtk_widget_set_tooltip_text(remove_button, _("Remove preset"));
+ 	gtk_widget_set_sensitive(remove_button, FALSE);
+
+	g_signal_connect(G_OBJECT(remove_button), "clicked", G_CALLBACK(remove_button_clicked_cb), NULL);
+
+ 	save_button = gtk_button_new();
+	gtk_button_set_image(GTK_BUTTON(save_button), gtk_image_new_from_stock(GTK_STOCK_SAVE, GTK_ICON_SIZE_MENU));
+	gtk_button_set_relief (GTK_BUTTON (save_button), GTK_RELIEF_NONE);
+	gtk_widget_set_tooltip_text(save_button, _("Save to file\xE2\x80\xA6"));
+
+	if (settings.presets == NULL) {
+		gtk_widget_set_sensitive(save_button, FALSE);
+	} else {
+		gtk_widget_set_sensitive(save_button, TRUE);
+	}
+
+	g_signal_connect(G_OBJECT(save_button), "clicked", G_CALLBACK(save_to_file_cb), NULL);
+
+ 	open_button = gtk_button_new();
+	gtk_button_set_image(GTK_BUTTON(open_button), gtk_image_new_from_stock(GTK_STOCK_OPEN, GTK_ICON_SIZE_MENU));
+	gtk_button_set_relief (GTK_BUTTON (open_button), GTK_RELIEF_NONE);
+	gtk_widget_set_tooltip_text(open_button, _("Load from file\xE2\x80\xA6"));
+	gtk_widget_set_sensitive(open_button, TRUE);
+
+	g_signal_connect(G_OBJECT(open_button), "clicked", G_CALLBACK(load_from_file_cb), NULL);
+
+	gtk_box_pack_end(GTK_BOX(button_box), move_down_button, FALSE, FALSE, 0);
+	gtk_box_pack_end(GTK_BOX(button_box), move_up_button, FALSE, FALSE, 0);
+	gtk_box_pack_end(GTK_BOX(button_box), remove_button, FALSE, FALSE, 0);
+	gtk_box_pack_end(GTK_BOX(button_box), add_button, FALSE, FALSE, 0);
+	gtk_box_pack_end(GTK_BOX(button_box), save_button, FALSE, FALSE, 0);
+	gtk_box_pack_end(GTK_BOX(button_box), open_button, FALSE, FALSE, 0);
+
+	gtk_grid_attach(GTK_GRID(grid), button_box, 1, 7, 2, 1);
 
 	/* The record settings part */
 	record_hdr = g_strconcat("<span weight=\"bold\">", _("Record Settings"), "</span>", NULL);
