Description: Drop GtkStock usage.
Author: POJAR GEORGE <geoubuntu@gmail.com>
Index: gnomeradio-1.8/src/trayicon.c
===================================================================
--- gnomeradio-1.8.orig/src/trayicon.c
+++ gnomeradio-1.8/src/trayicon.c
@@ -65,6 +65,7 @@ void preset_menuitem_activate_cb(GtkMenu
 }
 
 void create_tray_menu(GtkWidget *app) {
+	GtkWidget *menuitem;
 	GList *node = settings.presets;
 	int i;
 	
@@ -73,7 +74,7 @@ void create_tray_menu(GtkWidget *app) {
 	for (i = 0; node; i++, node = node->next)
 	{
 		preset *ps = (preset*)node->data;
-		GtkWidget *menuitem = gtk_menu_item_new_with_label(ps->title); 
+		menuitem = gtk_menu_item_new_with_label(ps->title);
 		
 		gtk_menu_shell_insert(GTK_MENU_SHELL(tray_menu), menuitem, i);		
 		g_signal_connect(G_OBJECT(menuitem), "activate", (GCallback)preset_menuitem_activate_cb, GINT_TO_POINTER (i));
@@ -89,10 +90,10 @@ void create_tray_menu(GtkWidget *app) {
 	g_signal_connect(G_OBJECT(mute_menuitem), "toggled", (GCallback)mute_menuitem_toggled_cb, (gpointer)app);
 	gtk_widget_show(mute_menuitem);
 
-	GtkWidget *record_menuitem = gtk_image_menu_item_new_from_stock(GTK_STOCK_MEDIA_RECORD, NULL);
-	gtk_menu_shell_append(GTK_MENU_SHELL(tray_menu), record_menuitem);		
-	g_signal_connect(G_OBJECT(record_menuitem), "activate", (GCallback)record_menuitem_activate_cb, app);
-	gtk_widget_show(record_menuitem);
+	menuitem = gtk_menu_item_new_with_mnemonic (_("_Record"));
+	gtk_menu_shell_append (GTK_MENU_SHELL (tray_menu), menuitem);
+	g_signal_connect (G_OBJECT (menuitem), "activate", (GCallback)record_menuitem_activate_cb, app);
+	gtk_widget_show (menuitem);
 
 	gtk_menu_shell_append(GTK_MENU_SHELL(tray_menu), gtk_separator_menu_item_new());
 	
@@ -103,10 +104,10 @@ void create_tray_menu(GtkWidget *app) {
 	g_signal_connect(G_OBJECT(showwindow_menuitem), "activate", (GCallback)showwindow_menuitem_toggled_cb, (gpointer)app);
 	gtk_widget_show(showwindow_menuitem);
 
-	GtkWidget *quit_menuitem = gtk_image_menu_item_new_from_stock(GTK_STOCK_QUIT, NULL);
-	gtk_menu_shell_append(GTK_MENU_SHELL(tray_menu), quit_menuitem);		
-	g_signal_connect(G_OBJECT(quit_menuitem), "activate", (GCallback)quit_menuitem_activate_cb, NULL);
-	gtk_widget_show(quit_menuitem);
+	menuitem = gtk_menu_item_new_with_mnemonic (_("_Quit"));
+	gtk_menu_shell_append (GTK_MENU_SHELL (tray_menu), menuitem);
+	g_signal_connect (G_OBJECT (menuitem), "activate", (GCallback)quit_menuitem_activate_cb, NULL);
+	gtk_widget_show (menuitem);
 
 	gtk_widget_show_all(tray_menu);
 }
@@ -135,10 +136,8 @@ void create_tray_icon(GtkWidget *app)
 	tray_icon = G_OBJECT(gtk_status_icon_new_from_pixbuf(pixbuf));
 	g_object_unref(pixbuf);
 
-	g_signal_connect(G_OBJECT(tray_icon), "activate", 
-		G_CALLBACK(tray_activate_cb), (gpointer)app);
-	g_signal_connect(G_OBJECT(tray_icon), "popup-menu",
-		G_CALLBACK(tray_popup_menu), (gpointer)app);
+	g_signal_connect (G_OBJECT(tray_icon), "activate", G_CALLBACK (tray_activate_cb), (gpointer)app);
+	g_signal_connect (G_OBJECT(tray_icon), "popup-menu", G_CALLBACK (tray_popup_menu), (gpointer)app);
 	
 	text = g_strdup_printf(_("Gnomeradio - %.2f MHz"), gtk_adjustment_get_value(adj)/STEPS);
         gtk_status_icon_set_tooltip_text(GTK_STATUS_ICON(tray_icon), text);
Index: gnomeradio-1.8/src/record.c
===================================================================
--- gnomeradio-1.8.orig/src/record.c
+++ gnomeradio-1.8/src/record.c
@@ -203,15 +203,14 @@ static gint delete_event_cb(GtkWidget* w
 
 GtkWidget* record_status_window(Recording *recording)
 {
-	GtkWidget *btn_label, *btn_pixmap, *button;
-	GtkWidget *vbox, *btn_box, *hbox;
-	GtkWidget *f_lbl, *t_lbl, *s_lbl, *l_lbl;
-	GtkWidget *grid, *r_grid;
-	GtkWidget *title;
+	GtkWidget *vbox;
+	GtkWidget *grid;
 	GtkWidget *image;
-	GtkWidget *level_box;
+	GtkWidget *box;
+	GtkWidget *label;
 	GtkWidget *expander;
-	char *text, *str;
+	GtkWidget *button;
+	gchar *text, *markup;
 
 	status_dialog = gtk_window_new(GTK_WINDOW_TOPLEVEL);
 	gtk_window_set_title(GTK_WINDOW(status_dialog),_("Gnomeradio recording status"));
@@ -230,84 +229,86 @@ GtkWidget* record_status_window(Recordin
 	gtk_widget_set_valign(image, GTK_ALIGN_START);
 	gtk_grid_attach(GTK_GRID(grid), image, 0, 0, 1, 3);
 
-	str = g_strdup_printf(_("Recording from station %s"), recording->station);
-	text = g_strdup_printf("<big><b>%s</b></big>", str);
-	g_free(str);
-	title = gtk_label_new(text);
-	g_free(text);
-	gtk_widget_set_halign(title, GTK_ALIGN_START);
-	gtk_label_set_use_markup(GTK_LABEL(title), TRUE);
-	gtk_grid_attach(GTK_GRID(grid), title, 1, 0, 1, 1);
+	label = gtk_label_new (NULL);
+	gtk_widget_set_halign (label, GTK_ALIGN_START);
+	text = g_markup_printf_escaped (_("Recording from station %s"), recording->station);
+	markup = g_strdup_printf ("<span size=\"larger\" weight=\"bold\">%s</span>", text);
+	gtk_label_set_markup (GTK_LABEL (label), markup);
+	g_free (text);
+	g_free (markup);
+	gtk_grid_attach(GTK_GRID(grid), label, 1, 0, 1, 1);
 
-	level_box = gtk_box_new(GTK_ORIENTATION_VERTICAL, 0);
+	box = gtk_box_new (GTK_ORIENTATION_VERTICAL, 0);
 	level = gtk_progress_bar_new();
-	gtk_box_pack_start(GTK_BOX(level_box), level, FALSE, TRUE, 0);
-	gtk_grid_attach(GTK_GRID(grid), level_box, 1, 1, 1, 1);
+	gtk_box_pack_start (GTK_BOX (box), level, FALSE, TRUE, 0);
+	gtk_grid_attach (GTK_GRID (grid), box, 1, 1, 1, 1);
 
 	expander = gtk_expander_new(_("Details"));
 	gtk_grid_attach(GTK_GRID(grid), expander, 1, 2, 1, 1);
 
-	r_grid = gtk_grid_new();
-	gtk_grid_set_row_spacing(GTK_GRID(r_grid), 5);
-	gtk_grid_set_column_spacing(GTK_GRID(r_grid), 15);
-	gtk_container_set_border_width(GTK_CONTAINER(r_grid), 5);
-
-	f_lbl = gtk_label_new(_("Name:"));
-	gtk_widget_set_halign(f_lbl, GTK_ALIGN_START);
-	gtk_grid_attach(GTK_GRID(r_grid), f_lbl, 0, 0, 1, 1);
-
-	t_lbl = gtk_label_new(_("Type:"));
-	gtk_widget_set_halign(t_lbl, GTK_ALIGN_START);
-	gtk_grid_attach(GTK_GRID(r_grid), t_lbl, 0, 1, 1, 1);
-
-	s_lbl = gtk_label_new(_("Size:"));
-	gtk_widget_set_halign(s_lbl, GTK_ALIGN_START);
-	gtk_grid_attach(GTK_GRID(r_grid), s_lbl, 0, 2, 1, 1);
-
-	l_lbl = gtk_label_new(_("Length:"));
-	gtk_widget_set_halign(l_lbl, GTK_ALIGN_START);
-	gtk_grid_attach(GTK_GRID(r_grid), l_lbl, 0, 3, 1, 1);
+	gtk_box_pack_start (GTK_BOX(vbox), grid, TRUE, TRUE, 0);
+
+	grid = gtk_grid_new ();
+	gtk_grid_set_row_spacing (GTK_GRID (grid), 5);
+	gtk_grid_set_column_spacing (GTK_GRID (grid), 15);
+	gtk_container_set_border_width (GTK_CONTAINER (grid), 5);
+
+	label = gtk_label_new (_("Name:"));
+	gtk_widget_set_halign (label, GTK_ALIGN_START);
+	gtk_grid_attach (GTK_GRID (grid), label, 0, 0, 1, 1);
+
+	label = gtk_label_new (_("Type:"));
+	gtk_widget_set_halign (label, GTK_ALIGN_START);
+	gtk_grid_attach (GTK_GRID (grid), label, 0, 1, 1, 1);
+
+	label = gtk_label_new (_("Size:"));
+	gtk_widget_set_halign (label, GTK_ALIGN_START);
+	gtk_grid_attach (GTK_GRID (grid), label, 0, 2, 1, 1);
+
+	label = gtk_label_new (_("Length:"));
+	gtk_widget_set_halign(label, GTK_ALIGN_START);
+	gtk_grid_attach (GTK_GRID (grid), label, 0, 3, 1, 1);
 
 	file_lbl = gtk_label_new(NULL);
 	gtk_label_set_ellipsize(GTK_LABEL(file_lbl), PANGO_ELLIPSIZE_START);
 	gtk_widget_set_halign(file_lbl, GTK_ALIGN_START);
-	gtk_grid_attach(GTK_GRID(r_grid), file_lbl, 1, 0, 1, 1);
+	gtk_grid_attach (GTK_GRID (grid), file_lbl, 1, 0, 1, 1);
 
 	type_lbl = gtk_label_new(NULL);
 	gtk_widget_set_halign(type_lbl, GTK_ALIGN_START);
-	gtk_grid_attach(GTK_GRID(r_grid), type_lbl, 1, 1, 1, 1);
+	gtk_grid_attach (GTK_GRID (grid), type_lbl, 1, 1, 1, 1);
 
 	size_lbl = gtk_label_new(NULL);
 	gtk_widget_set_halign(size_lbl, GTK_ALIGN_START);
-	gtk_grid_attach(GTK_GRID(r_grid), size_lbl, 1, 2, 1, 1);
+	gtk_grid_attach (GTK_GRID (grid), size_lbl, 1, 2, 1, 1);
 
 	length_lbl = gtk_label_new(NULL);
  	gtk_widget_set_halign(length_lbl, GTK_ALIGN_START);
-	gtk_grid_attach(GTK_GRID(r_grid), length_lbl, 1, 3, 1, 1);
+	gtk_grid_attach (GTK_GRID (grid), length_lbl, 1, 3, 1, 1);
 
-	gtk_container_add(GTK_CONTAINER(expander), r_grid);
+	gtk_container_add (GTK_CONTAINER (expander), grid);
 
-	button = gtk_button_new();
-	btn_box = gtk_box_new(GTK_ORIENTATION_HORIZONTAL, 0);
-	btn_label = gtk_label_new(_("Stop Recording"));
-	btn_pixmap = gtk_image_new_from_stock(GTK_STOCK_STOP, GTK_ICON_SIZE_BUTTON);
-	
-	gtk_box_pack_start (GTK_BOX(btn_box), btn_pixmap, FALSE, FALSE, 2);
-	gtk_box_pack_start (GTK_BOX(btn_box), btn_label, FALSE, FALSE, 2);
+	box = gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
 
-	gtk_container_add(GTK_CONTAINER(button), btn_box);
+	button = gtk_button_new ();
+	label = gtk_label_new (_("Stop Recording"));
+	image = gtk_image_new_from_icon_name ("process-stop", GTK_ICON_SIZE_BUTTON);
 	
-	hbox = gtk_box_new(GTK_ORIENTATION_HORIZONTAL, 0);
-	gtk_box_pack_end (GTK_BOX(hbox), button, TRUE, FALSE, 0);
+	gtk_box_pack_start (GTK_BOX(box), image, FALSE, FALSE, 2);
+	gtk_box_pack_start (GTK_BOX(box), label, FALSE, FALSE, 2);
+
+	gtk_container_add(GTK_CONTAINER(button), box);
 	
-	gtk_box_pack_start(GTK_BOX(vbox), grid, TRUE, TRUE, 0);
-	gtk_box_pack_start (GTK_BOX(vbox), hbox, FALSE, FALSE, 0);
+	box = gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
+
+	gtk_box_pack_end (GTK_BOX (box), button, TRUE, FALSE, 0);
+	gtk_box_pack_start (GTK_BOX(vbox), box, FALSE, FALSE, 0);
 
 	gtk_container_add(GTK_CONTAINER(status_dialog), vbox);
 	gtk_widget_grab_focus (button);
 
-	g_signal_connect(G_OBJECT(status_dialog), "delete_event", G_CALLBACK(delete_event_cb), recording);
 	g_signal_connect(G_OBJECT(button), "clicked", G_CALLBACK(stop_rec_button_clicked_cb), recording);
+	g_signal_connect(G_OBJECT(status_dialog), "delete_event", G_CALLBACK(delete_event_cb), recording);
 	g_signal_connect(G_OBJECT(status_dialog), "key-press-event", G_CALLBACK(key_press_event_cb), recording);
 
 	gtk_window_set_position(GTK_WINDOW(status_dialog), GTK_WIN_POS_CENTER);
Index: gnomeradio-1.8/src/prefs.c
===================================================================
--- gnomeradio-1.8.orig/src/prefs.c
+++ gnomeradio-1.8/src/prefs.c
@@ -38,14 +38,19 @@ extern gnomeradio_settings settings;
 
 extern gboolean main_visible;
 
-static GtkWidget *device_entry, *mixer_entry;
+static GtkWidget *device_entry;
+static GtkWidget *mixer_entry;
 static GtkWidget *mute_on_exit_cb;
-static GtkWidget *save_button, *move_up_button, *move_down_button, *add_button, *remove_button;
-static GtkWidget *audio_profile_combo;
-static GtkWidget *install_plugins_button;
 static GtkWidget *list_view;
 static GtkListStore *list_store;
 static GtkTreeSelection *selection;
+static GtkWidget *save_button;
+static GtkWidget *move_up_button;
+static GtkWidget *move_down_button;
+static GtkWidget *add_button;
+static GtkWidget *remove_button;
+static GtkWidget *audio_profile_combo;
+static GtkWidget *install_button;
 
 gboolean save_settings(void)
 {
@@ -303,12 +308,12 @@ static void audio_profile_combo_change_c
 
 	/* indicate whether additional plugins are required to encode in this format */
 	if (rb_gst_check_missing_plugins (profile, NULL, NULL)) {
-		gtk_widget_set_visible (install_plugins_button, TRUE);
+		gtk_widget_set_visible (install_button, TRUE);
 
-		gtk_widget_set_sensitive (install_plugins_button,
+		gtk_widget_set_sensitive (install_button,
 					gst_install_plugins_supported ());
 	} else {
-		gtk_widget_set_visible (install_plugins_button, FALSE);
+		gtk_widget_set_visible (install_button, FALSE);
 	}
 	g_free (media_type);
 }
@@ -915,11 +920,11 @@ static void save_to_file_cb(GtkWidget *b
 	GtkFileFilter *file_filter_xml;
 	gchar *filename;
 
-	dialog = gtk_file_chooser_dialog_new("Select file name\xE2\x80\xA6", NULL,
-						GTK_FILE_CHOOSER_ACTION_SAVE,
-						GTK_STOCK_SAVE, GTK_RESPONSE_ACCEPT,
-						GTK_STOCK_CANCEL,
-						GTK_RESPONSE_CANCEL, NULL);
+	dialog = gtk_file_chooser_dialog_new (_("Select file name\xE2\x80\xA6"), NULL,
+					      GTK_FILE_CHOOSER_ACTION_SAVE,
+					      _("_Save"), GTK_RESPONSE_ACCEPT,
+					      _("_Cancel"), GTK_RESPONSE_CANCEL,
+					      NULL);
 
 	file_filter_all = gtk_file_filter_new();
 	gtk_file_filter_set_name(file_filter_all, _("All Files"));
@@ -1136,11 +1141,11 @@ static void load_from_file_cb(GtkWidget
 	GtkFileFilter *file_filter_xml;
 	gchar *filename;
 
-	dialog = gtk_file_chooser_dialog_new("Select file name\xE2\x80\xA6", NULL,
-						GTK_FILE_CHOOSER_ACTION_OPEN,
-						GTK_STOCK_OPEN, GTK_RESPONSE_ACCEPT,
-						GTK_STOCK_CANCEL,
-						GTK_RESPONSE_CANCEL, NULL);
+	dialog = gtk_file_chooser_dialog_new (_("Select file name\xE2\x80\xA6"), NULL,
+					      GTK_FILE_CHOOSER_ACTION_OPEN,
+					      _("_Open"), GTK_RESPONSE_ACCEPT,
+					      _("_Cancel"), GTK_RESPONSE_CANCEL,
+					      NULL);
 
 	file_filter_all = gtk_file_filter_new();
 	gtk_file_filter_set_name(file_filter_all, _("All Files"));
@@ -1186,38 +1191,39 @@ gboolean action_mode (gint mode)
 GtkWidget* prefs_window(GtkWidget *app)
 {
 	GtkWidget *dialog;
+	GtkWidget *content_area;
 	GtkWidget *box;
 	GtkWidget *grid;
-	GtkWidget *settings_label, *presets_label, *record_label;
-	GtkWidget *s_indent_label, *p_indent_label, *r_indent_label;
-	GtkWidget *destination_label;
-	GtkWidget *destination_button;
-	GtkWidget *audio_profile_label;
-	GtkWidget *device_label, *mixer_label;
-	GtkWidget *button_box;
-	GtkWidget *open_button;
+	GtkWidget *label;
 	GtkWidget *scrolled_window;
 	GtkCellRenderer *cellrenderer;
 	GtkTreeViewColumn *list_column;
+	GtkWidget *button_box;
+	GtkWidget *open_button;
+	GtkWidget *destination_button;
+	GtkWidget *image;
 
 	GstEncodingProfile *profile;
+
 	gint i;
-	char *settings_hdr, *presets_hdr, *record_hdr;
+	gchar *markup;
 	preset* ps;
 	GList *l;
 	
-	dialog = gtk_dialog_new_with_buttons(_("Gnomeradio Settings"), GTK_WINDOW(app), 
-			GTK_DIALOG_MODAL | GTK_DIALOG_DESTROY_WITH_PARENT,
-			GTK_STOCK_CLOSE, GTK_RESPONSE_CLOSE, 
-			GTK_STOCK_HELP, GTK_RESPONSE_HELP,
-			NULL);
+	dialog = gtk_dialog_new_with_buttons (_("Gnomeradio Settings"), GTK_WINDOW (app),
+					      GTK_DIALOG_MODAL | GTK_DIALOG_DESTROY_WITH_PARENT,
+					      _("_Close"), GTK_RESPONSE_CLOSE,
+					      _("_Help"), GTK_RESPONSE_HELP,
+					      NULL);
 	
 	gtk_window_set_resizable(GTK_WINDOW(dialog), FALSE);
 	gtk_dialog_set_default_response(GTK_DIALOG(dialog), GTK_RESPONSE_CLOSE);
 
+	content_area = gtk_dialog_get_content_area (GTK_DIALOG(dialog));
+
 	box = gtk_box_new(GTK_ORIENTATION_VERTICAL, 15);
 	gtk_container_set_border_width(GTK_CONTAINER(box), 10);
-	gtk_box_pack_start(GTK_BOX(gtk_dialog_get_content_area(GTK_DIALOG(dialog))), box, TRUE, TRUE, 0);
+	gtk_box_pack_start (GTK_BOX (content_area), box, TRUE, TRUE, 0);
 	
 	grid = gtk_grid_new();
 	gtk_grid_set_row_spacing(GTK_GRID(grid), 5);
@@ -1225,29 +1231,30 @@ GtkWidget* prefs_window(GtkWidget *app)
 	gtk_box_pack_start(GTK_BOX(box), grid, TRUE, TRUE, 0);
 
 	/* The general settings part */
-	settings_hdr = g_strconcat("<span weight=\"bold\">", _("General Settings"), "</span>", NULL);
-	settings_label = gtk_label_new(settings_hdr);
-	gtk_widget_set_halign(settings_label, GTK_ALIGN_START);
-	gtk_label_set_use_markup(GTK_LABEL(settings_label), TRUE);
-	g_free(settings_hdr);
-	gtk_grid_attach(GTK_GRID(grid), settings_label, 0, 0, 2, 1);
+	label = gtk_label_new (NULL);
+	gtk_widget_set_halign (label, GTK_ALIGN_START);
+	markup = g_strdup_printf ("<span weight=\"bold\">%s</span>", _("General Settings"));
+	gtk_label_set_markup (GTK_LABEL (label), markup);
+	g_free (markup);
+	gtk_grid_attach(GTK_GRID(grid), label, 0, 0, 2, 1);
+
+	label = gtk_label_new ("");
+	gtk_grid_attach (GTK_GRID (grid), label, 0, 1, 1, 3);
+
+	label = gtk_label_new (_("Radio Device:"));
+	gtk_widget_set_halign (label, GTK_ALIGN_START);
+	gtk_grid_attach (GTK_GRID (grid), label, 1, 1, 1, 1);
 
-	s_indent_label = gtk_label_new("");
-	gtk_grid_attach(GTK_GRID(grid), s_indent_label, 0, 1, 1, 3);
-
-	device_label = gtk_label_new(_("Radio Device:"));
-	gtk_widget_set_halign(device_label, GTK_ALIGN_START);
 	device_entry = gtk_entry_new();
 	gtk_entry_set_text(GTK_ENTRY(device_entry), settings.device);
-	gtk_grid_attach(GTK_GRID(grid), device_label, 1, 1, 1, 1);
 	gtk_grid_attach(GTK_GRID(grid), device_entry, 2, 1, 1, 1);
 
-	mixer_label = gtk_label_new(_("Mixer Source:"));
-	gtk_widget_set_halign(mixer_label, GTK_ALIGN_START);
+	label = gtk_label_new (_("Mixer Source:"));
+	gtk_widget_set_halign (label, GTK_ALIGN_START);
+	gtk_grid_attach (GTK_GRID (grid), label, 1, 2, 1, 1);
+
 	mixer_entry = gtk_entry_new();
 	gtk_entry_set_text(GTK_ENTRY(mixer_entry), settings.mixer);
-	
-	gtk_grid_attach(GTK_GRID(grid), mixer_label, 1, 2, 1, 1);
 	gtk_grid_attach(GTK_GRID(grid), mixer_entry, 2, 2, 1, 1);
 
 	mute_on_exit_cb = gtk_check_button_new_with_label(_("Mute on exit"));
@@ -1266,15 +1273,15 @@ GtkWidget* prefs_window(GtkWidget *app)
 	gtk_widget_set_tooltip_text(mute_on_exit_cb, _("Mute radio device on exit"));
 
 	/* The presets part */
-	presets_hdr = g_strconcat("<span weight=\"bold\">", _("Presets"), "</span>", NULL);
-	presets_label = gtk_label_new(presets_hdr);
-	gtk_widget_set_halign(presets_label, GTK_ALIGN_START);
-	gtk_label_set_use_markup(GTK_LABEL(presets_label), TRUE);
-	g_free(presets_hdr);
-	gtk_grid_attach(GTK_GRID(grid), presets_label, 0, 4, 2, 1);
+	label = gtk_label_new (NULL);
+	gtk_widget_set_halign (label, GTK_ALIGN_START);
+	markup = g_strdup_printf ("<span weight=\"bold\">%s</span>", _("Presets"));
+	gtk_label_set_markup (GTK_LABEL (label), markup);
+	g_free (markup);
+	gtk_grid_attach(GTK_GRID(grid), label, 0, 4, 2, 1);
 
-	p_indent_label = gtk_label_new("");
-	gtk_grid_attach(GTK_GRID(grid), p_indent_label, 0, 5, 1, 2);
+	label = gtk_label_new ("");
+	gtk_grid_attach (GTK_GRID (grid), label, 0, 5, 1, 2);
 
 	scrolled_window = gtk_scrolled_window_new(NULL, NULL);
 	gtk_scrolled_window_set_min_content_height(GTK_SCROLLED_WINDOW(scrolled_window), 75);
@@ -1337,7 +1344,8 @@ GtkWidget* prefs_window(GtkWidget *app)
 	button_box = gtk_box_new(GTK_ORIENTATION_HORIZONTAL, 0);
 
 	move_up_button = gtk_button_new();
-	gtk_button_set_image(GTK_BUTTON(move_up_button), gtk_image_new_from_stock(GTK_STOCK_GO_UP, GTK_ICON_SIZE_MENU));
+	image = gtk_image_new_from_icon_name ("go-up", GTK_ICON_SIZE_MENU);
+	gtk_button_set_image (GTK_BUTTON (move_up_button), image);
 	gtk_button_set_relief (GTK_BUTTON (move_up_button), GTK_RELIEF_NONE);
 	gtk_widget_set_sensitive(move_up_button, FALSE);
 	gtk_widget_set_tooltip_text(move_up_button, _("Move preset up"));
@@ -1345,7 +1353,8 @@ GtkWidget* prefs_window(GtkWidget *app)
 	g_signal_connect(G_OBJECT(move_up_button), "clicked", G_CALLBACK(move_up_button_clicked_cb), NULL);
 
 	move_down_button = gtk_button_new();
-	gtk_button_set_image(GTK_BUTTON(move_down_button), gtk_image_new_from_stock(GTK_STOCK_GO_DOWN, GTK_ICON_SIZE_MENU));
+	image = gtk_image_new_from_icon_name ("go-down", GTK_ICON_SIZE_MENU);
+	gtk_button_set_image (GTK_BUTTON (move_down_button), image);
 	gtk_button_set_relief (GTK_BUTTON (move_down_button), GTK_RELIEF_NONE);
 	gtk_widget_set_sensitive(move_down_button, FALSE);
 	gtk_widget_set_tooltip_text(move_down_button, _("Move preset down"));
@@ -1353,14 +1362,16 @@ GtkWidget* prefs_window(GtkWidget *app)
 	g_signal_connect(G_OBJECT(move_down_button), "clicked", G_CALLBACK(move_down_button_clicked_cb), NULL);
 
 	add_button = gtk_button_new();
-	gtk_button_set_image(GTK_BUTTON(add_button), gtk_image_new_from_stock(GTK_STOCK_ADD, GTK_ICON_SIZE_MENU));
+	image = gtk_image_new_from_icon_name ("list-add", GTK_ICON_SIZE_MENU);
+	gtk_button_set_image (GTK_BUTTON(add_button), image);
 	gtk_button_set_relief (GTK_BUTTON (add_button), GTK_RELIEF_NONE);
 	gtk_widget_set_tooltip_text(add_button, _("Add preset"));
 
 	g_signal_connect(G_OBJECT(add_button), "clicked", G_CALLBACK(add_button_clicked_cb), NULL);
 
  	remove_button = gtk_button_new();
-	gtk_button_set_image(GTK_BUTTON(remove_button), gtk_image_new_from_stock(GTK_STOCK_REMOVE, GTK_ICON_SIZE_MENU));
+	image = gtk_image_new_from_icon_name ("list-remove", GTK_ICON_SIZE_MENU);
+	gtk_button_set_image (GTK_BUTTON (remove_button), image);
 	gtk_button_set_relief (GTK_BUTTON (remove_button), GTK_RELIEF_NONE);
 	gtk_widget_set_tooltip_text(remove_button, _("Remove preset"));
  	gtk_widget_set_sensitive(remove_button, FALSE);
@@ -1368,20 +1379,21 @@ GtkWidget* prefs_window(GtkWidget *app)
 	g_signal_connect(G_OBJECT(remove_button), "clicked", G_CALLBACK(remove_button_clicked_cb), NULL);
 
  	save_button = gtk_button_new();
-	gtk_button_set_image(GTK_BUTTON(save_button), gtk_image_new_from_stock(GTK_STOCK_SAVE, GTK_ICON_SIZE_MENU));
+	image = gtk_image_new_from_icon_name ("document-save", GTK_ICON_SIZE_MENU);
+	gtk_button_set_image (GTK_BUTTON (save_button), image);
 	gtk_button_set_relief (GTK_BUTTON (save_button), GTK_RELIEF_NONE);
 	gtk_widget_set_tooltip_text(save_button, _("Save to file\xE2\x80\xA6"));
 
-	if (settings.presets == NULL) {
-		gtk_widget_set_sensitive(save_button, FALSE);
-	} else {
-		gtk_widget_set_sensitive(save_button, TRUE);
-	}
+	if (settings.presets == NULL)
+		gtk_widget_set_sensitive (save_button, FALSE);
+	else
+		gtk_widget_set_sensitive (save_button, TRUE);
 
 	g_signal_connect(G_OBJECT(save_button), "clicked", G_CALLBACK(save_to_file_cb), NULL);
 
  	open_button = gtk_button_new();
-	gtk_button_set_image(GTK_BUTTON(open_button), gtk_image_new_from_stock(GTK_STOCK_OPEN, GTK_ICON_SIZE_MENU));
+	image = gtk_image_new_from_icon_name ("document-open", GTK_ICON_SIZE_MENU);
+	gtk_button_set_image (GTK_BUTTON(open_button), image);
 	gtk_button_set_relief (GTK_BUTTON (open_button), GTK_RELIEF_NONE);
 	gtk_widget_set_tooltip_text(open_button, _("Load from file\xE2\x80\xA6"));
 	gtk_widget_set_sensitive(open_button, TRUE);
@@ -1398,49 +1410,48 @@ GtkWidget* prefs_window(GtkWidget *app)
 	gtk_grid_attach(GTK_GRID(grid), button_box, 2, 7, 1, 1);
 
 	/* The record settings part */
-	record_hdr = g_strconcat("<span weight=\"bold\">", _("Record Settings"), "</span>", NULL);
-	record_label = gtk_label_new(record_hdr);
-	gtk_widget_set_halign(record_label, GTK_ALIGN_START);
-	gtk_label_set_use_markup(GTK_LABEL(record_label), TRUE);
-	g_free(record_hdr);
-	gtk_grid_attach(GTK_GRID(grid), record_label, 0, 8, 2, 1);
+	label = gtk_label_new (NULL);
+	markup = g_strdup_printf ("<span weight=\"bold\">%s</span>", _("Record Settings"));
+	gtk_widget_set_halign (label, GTK_ALIGN_START);
+	gtk_label_set_markup (GTK_LABEL (label), markup);
+	g_free (markup);
+	gtk_grid_attach (GTK_GRID (grid), label, 0, 8, 2, 1);
+
+	label = gtk_label_new ("");
+	gtk_grid_attach (GTK_GRID (grid), label, 0, 9, 1, 2);
+
+	label = gtk_label_new (_("Destination:"));
+	gtk_widget_set_halign (label, GTK_ALIGN_START);
+	gtk_grid_attach(GTK_GRID(grid), label, 1, 9, 1, 1);
 
-	r_indent_label = gtk_label_new("");
-	gtk_grid_attach(GTK_GRID(grid), r_indent_label, 0, 9, 1, 2);
+	destination_button = gtk_file_chooser_button_new (_("Select a folder"), GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER);
+	gtk_file_chooser_set_filename(GTK_FILE_CHOOSER(destination_button), rec_settings.destination);
+	gtk_grid_attach(GTK_GRID(grid), destination_button, 2, 9, 1, 1);
 
-	destination_label = gtk_label_new(_("Destination:"));
-	gtk_widget_set_halign(destination_label, GTK_ALIGN_START);
+	label = gtk_label_new (_("Format:"));
+	gtk_widget_set_halign (label, GTK_ALIGN_START);
+	gtk_grid_attach (GTK_GRID (grid), label, 1, 10, 1, 1);
 
-	destination_button = gtk_file_chooser_button_new(
-		_("Select a folder"), GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER);
-	gtk_file_chooser_set_filename(GTK_FILE_CHOOSER(destination_button), rec_settings.destination);
-	
-	audio_profile_label = gtk_label_new(_("Format:"));
-	gtk_widget_set_halign(audio_profile_label, GTK_ALIGN_START);
 	audio_profile_combo = audio_profile_choose_new();
 	audio_profile_chooser_set_active(audio_profile_combo, rec_settings.profile);
+	gtk_grid_attach (GTK_GRID (grid), audio_profile_combo, 2, 10, 1, 1);
 
-	install_plugins_button = gtk_button_new_with_label(_("Install additional software required to use this format\xE2\x80\xA6"));
-	gtk_widget_set_no_show_all (install_plugins_button, TRUE);
+	install_button = gtk_button_new_with_label(_("Install additional software required to use this format\xE2\x80\xA6"));
+	gtk_widget_set_no_show_all (install_button, TRUE);
+	gtk_grid_attach (GTK_GRID (grid), install_button, 2, 11, 1, 1);
 
 	profile = rb_gst_get_encoding_profile (rec_settings.profile);
 	if (rb_gst_check_missing_plugins (profile, NULL, NULL)) {
-		gtk_widget_set_visible (install_plugins_button, TRUE);
-		gtk_widget_set_sensitive (install_plugins_button,
+		gtk_widget_set_visible (install_button, TRUE);
+		gtk_widget_set_sensitive (install_button,
 					gst_install_plugins_supported ());
 	} else {
-		gtk_widget_set_visible (install_plugins_button, FALSE);
+		gtk_widget_set_visible (install_button, FALSE);
 	}
 
-	gtk_grid_attach(GTK_GRID(grid), destination_label, 1, 9, 1, 1);
-	gtk_grid_attach(GTK_GRID(grid), destination_button, 2, 9, 1, 1);
-	gtk_grid_attach(GTK_GRID(grid), audio_profile_label, 1, 10, 1, 1);
-	gtk_grid_attach(GTK_GRID(grid), audio_profile_combo, 2, 10, 1, 1);
-	gtk_grid_attach(GTK_GRID(grid), install_plugins_button, 2, 11, 1, 1);
-
 	g_signal_connect(GTK_FILE_CHOOSER(destination_button), "selection-changed", G_CALLBACK(destination_button_clicked_cb), NULL);
 	g_signal_connect(G_OBJECT(audio_profile_combo), "changed", G_CALLBACK(audio_profile_combo_change_cb), NULL);
-	g_signal_connect(G_OBJECT(install_plugins_button), "clicked", G_CALLBACK(audio_profile_install_plugins_cb), NULL);
+	g_signal_connect(G_OBJECT(install_button), "clicked", G_CALLBACK(audio_profile_install_plugins_cb), NULL);
 
 	gtk_widget_set_tooltip_text(destination_button, _("Select a location where to save recorded file."));
 	gtk_widget_set_tooltip_text(audio_profile_combo, _("Choose the format that should be used for recording."));
Index: gnomeradio-1.8/src/gui.c
===================================================================
--- gnomeradio-1.8.orig/src/gui.c
+++ gnomeradio-1.8/src/gui.c
@@ -65,23 +65,31 @@ char *alsa_capture = NULL;
 int alsa_latency = DEFAULT_LATENCY;
 int alsa_debug = 0;
 
-GtkWidget* volume_button, *preset_combo;
-GtkAdjustment *adj;
-GtkWidget* app;
-
 int mom_ps;
 gnomeradio_settings settings;
 
 gboolean main_visible;
 
+GtkWidget *app;
+GtkWidget *preset_combo;
+GtkAdjustment *adj;
+GtkWidget *volume_button;
+
 static GtkWidget *drawing_area;
-static GdkPixbuf *digits, *signal_s, *stereo;
+static GdkPixbuf *digits;
+static GdkPixbuf *signal_s;
+static GdkPixbuf *stereo;
 static GtkWidget *freq_scale;
-static GtkWidget *scfw_button, *scbw_button, *stfw_button, *stbw_button;
+static GtkWidget *scbw_button;
+static GtkWidget *stbw_button;
+static GtkWidget *stfw_button;
+static GtkWidget *scfw_button;
 static GtkWidget *rec_button;
 static GtkWidget *prefs_button;
 
-static int timeout_id, bp_timeout_id = -1, bp_timeout_steps = 0;
+static int timeout_id;
+static int bp_timeout_id = -1;
+static int bp_timeout_steps = 0;
 static int volume_value_changed_id;
 static gint mode;
 
@@ -165,7 +173,7 @@ static void initial_frequency_scan(GtkWi
 	data.dialog = gtk_dialog_new_with_buttons (_("Scanning"),
 						   GTK_WINDOW (app),
 						   DIALOG_FLAGS,
-						   GTK_STOCK_CANCEL,
+						   _("_Cancel"),
 						   GTK_RESPONSE_CANCEL,
 						   NULL);
 
@@ -570,7 +578,7 @@ static void adj_value_changed_cb(GtkAdju
 	else
 		buffer = g_strdup_printf(_("Gnomeradio - %.2f MHz"), freq);
 	gtk_window_set_title(GTK_WINDOW(window), buffer);
-	if (tray_icon) gtk_status_icon_set_tooltip_text(GTK_STATUS_ICON(tray_icon), buffer); //gtk_tooltips_set_tip(tooltips, tray_icon, buffer, NULL);
+	if (tray_icon) gtk_status_icon_set_tooltip_text(GTK_STATUS_ICON(tray_icon), buffer);
 	g_free(buffer);
 	
 	buffer = g_strdup_printf(_("Frequency: %.2f MHz"), freq);
@@ -1003,194 +1011,184 @@ void toggle_mainwindow_visibility(GtkWid
 GtkWidget* gnome_radio_gui(void)
 {
 	GtkWidget *app;
-	GtkWidget *quit_button;
-	GtkWidget *about_button;
-	GtkWidget *prefs_pixmap, *rec_pixmap, *quit_pixmap, *scfw_pixmap, *scbw_pixmap;
-	GtkWidget *stfw_pixmap, *stbw_pixmap, *about_pixmap;
-	GtkWidget *freq_up_pixmap, *freq_down_pixmap;
-	GdkPixbuf *freq_up_pixbuf, *freq_down_pixbuf;
-	GtkWidget *hbox1, *hbox2, *vbox, *menubox, *freq_vol_box;
-	GtkWidget *vseparator1, *vseparator4;
-	GtkWidget *label;
+	GtkWidget *vbox;
+	GtkWidget *box;
 	GtkWidget *frame;
+	GtkWidget *menubox;
+	GtkWidget *label;
+	GtkWidget *pixmap;
+	GdkPixbuf *pixbuf;
+	GtkWidget *vseparator;
+	GtkWidget *about_button;
+/*	GtkWidget *quit_button; */
+	GtkWidget *image;
 	gchar *text;
 	
 	app = gtk_window_new(GTK_WINDOW_TOPLEVEL);
-	/* app = gnome_app_new(PACKAGE, _("Gnomeradio")); */
-
 	gtk_window_set_resizable(GTK_WINDOW(app), FALSE);
-	/*gtk_window_set_policy(GTK_WINDOW(app), FALSE, FALSE, FALSE);*/
 	gtk_window_set_wmclass(GTK_WINDOW(app), "gnomeradio", "Gnomeradio");
 
-	frame = gtk_frame_new(NULL);
-	
-	quit_pixmap = gtk_image_new_from_stock(GTK_STOCK_QUIT, GTK_ICON_SIZE_BUTTON);
-	prefs_pixmap = gtk_image_new_from_stock(GTK_STOCK_PROPERTIES, GTK_ICON_SIZE_LARGE_TOOLBAR);
-	scfw_pixmap = gtk_image_new_from_stock(GTK_STOCK_MEDIA_FORWARD, GTK_ICON_SIZE_LARGE_TOOLBAR);
-	scbw_pixmap = gtk_image_new_from_stock(GTK_STOCK_MEDIA_REWIND, GTK_ICON_SIZE_LARGE_TOOLBAR);
-	stfw_pixmap = gtk_image_new_from_stock(GTK_STOCK_MEDIA_NEXT, GTK_ICON_SIZE_LARGE_TOOLBAR);
-	stbw_pixmap = gtk_image_new_from_stock(GTK_STOCK_MEDIA_PREVIOUS, GTK_ICON_SIZE_LARGE_TOOLBAR);
-	about_pixmap = gtk_image_new_from_stock(GTK_STOCK_ABOUT, GTK_ICON_SIZE_LARGE_TOOLBAR);
-	/*mute_pixmap = gtk_image_new_from_stock(GNOME_STOCK_VOLUME, GTK_ICON_SIZE_LARGE_TOOLBAR);*/
-	rec_pixmap = gtk_image_new_from_stock(GTK_STOCK_MEDIA_RECORD, GTK_ICON_SIZE_LARGE_TOOLBAR);
-	/*help_pixmap = gtk_image_new_from_stock(GTK_STOCK_HELP, GTK_ICON_SIZE_LARGE_TOOLBAR);*/
-	
-	quit_button = gtk_button_new();
-	prefs_button = gtk_button_new();
-	scfw_button = gtk_button_new();
-	scbw_button = gtk_button_new();
-	stfw_button = gtk_button_new();
-	stbw_button = gtk_button_new();
-	about_button = gtk_button_new();
-	/*volume_button = gtk_toggle_button_new();*/
-	volume_button = gtk_volume_button_new();
-	gtk_button_set_relief(GTK_BUTTON(volume_button), GTK_RELIEF_NORMAL);
-	gtk_widget_set_sensitive(volume_button, FALSE);
-	rec_button = gtk_button_new();
-	/*help_button = gtk_button_new();*/
+	gtk_widget_realize (app);
+	gtk_widget_get_window (app);
+
+	vbox = gtk_box_new (GTK_ORIENTATION_VERTICAL, 0);
+	gtk_container_set_border_width (GTK_CONTAINER(vbox), 3);
 
-	gtk_container_add(GTK_CONTAINER(quit_button), quit_pixmap);
-	gtk_container_add(GTK_CONTAINER(prefs_button), prefs_pixmap);
-	gtk_container_add(GTK_CONTAINER(scfw_button), scfw_pixmap);
-	gtk_container_add(GTK_CONTAINER(scbw_button), scbw_pixmap);
-	gtk_container_add(GTK_CONTAINER(stfw_button), stfw_pixmap);
-	gtk_container_add(GTK_CONTAINER(stbw_button), stbw_pixmap);
-	gtk_container_add(GTK_CONTAINER(about_button), about_pixmap);
-	/*gtk_container_add(GTK_CONTAINER(volume_button), mute_pixmap);*/
-	gtk_container_add(GTK_CONTAINER(rec_button), rec_pixmap);
-	/*gtk_container_add(GTK_CONTAINER(help_button), help_pixmap);*/
-
-	vbox = gtk_box_new(GTK_ORIENTATION_VERTICAL, 0);
-	hbox1 = gtk_box_new(GTK_ORIENTATION_HORIZONTAL, 0);
-	hbox2 = gtk_box_new(GTK_ORIENTATION_HORIZONTAL, 0);
-	menubox = gtk_box_new(GTK_ORIENTATION_VERTICAL, 0);
-	freq_vol_box = gtk_box_new(GTK_ORIENTATION_HORIZONTAL, 0);
-	
-	adj = GTK_ADJUSTMENT(gtk_adjustment_new(SUNSHINE*STEPS, FREQ_MIN*STEPS, FREQ_MAX*STEPS+1, 1, STEPS, 1));
-/*	volume = GTK_ADJUSTMENT(gtk_adjustment_new(100, 0, 101, 1, 10, 1)); */
-	
-	preset_combo = gtk_combo_box_text_new();
-	g_signal_connect(G_OBJECT(preset_combo), "changed", G_CALLBACK(preset_combo_change_cb), NULL);
-	
-	gtk_widget_set_size_request(preset_combo, 10, -1);
-	label = gtk_label_new(_("Presets:"));
-	
-	freq_scale = gtk_scale_new(GTK_ORIENTATION_HORIZONTAL, adj);
-	/*gtk_range_set_update_policy(GTK_RANGE(freq_scale), GTK_UPDATE_DELAYED);*/
-	/*vol_scale = gtk_hscale_new(volume);*/
-	
-	/*vol_up_pixbuf = gdk_pixbuf_new_from_xpm_data((const char**)vol_up_xpm);
-	vol_down_pixbuf = gdk_pixbuf_new_from_xpm_data((const char**)vol_down_xpm);*/
-	freq_up_pixbuf = gdk_pixbuf_new_from_xpm_data((const char**)freq_up_xpm);
-	freq_down_pixbuf = gdk_pixbuf_new_from_xpm_data((const char**)freq_down_xpm);
-
-	/*vol_up_pixmap = gtk_image_new_from_pixbuf(vol_up_pixbuf);
-	vol_down_pixmap = gtk_image_new_from_pixbuf(vol_down_pixbuf);*/
-	freq_up_pixmap = gtk_image_new_from_pixbuf(freq_up_pixbuf);
-	freq_down_pixmap = gtk_image_new_from_pixbuf(freq_down_pixbuf);
+	box = gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
 
-	/*gtk_widget_set_usize(freq_scale, 160, 10);*/
-	/*gtk_widget_set_size_request(freq_scale, 160, -1);*/
+	frame = gtk_frame_new (NULL);
+	gtk_frame_set_shadow_type (GTK_FRAME(frame), GTK_SHADOW_IN);
+	gtk_container_set_border_width (GTK_CONTAINER (frame), 2);
 
-	gtk_widget_realize(app);
-	gtk_widget_get_window(app);
 	drawing_area = gtk_drawing_area_new();
-	
-	digits = gdk_pixbuf_new_from_xpm_data((const char**)digits_xpm);
-	signal_s = gdk_pixbuf_new_from_xpm_data((const char**)signal_xpm);
-	stereo = gdk_pixbuf_new_from_xpm_data((const char**)stereo_xpm);
-	
-	vseparator1 = gtk_separator_new(GTK_ORIENTATION_VERTICAL);
- 	/*vseparator2 = gtk_vseparator_new();*/
- 	/*vseparator3 = gtk_vseparator_new();*/
-	vseparator4 = gtk_separator_new(GTK_ORIENTATION_VERTICAL);
-	
-	gtk_scale_set_digits(GTK_SCALE(freq_scale), 0);
-	gtk_scale_set_draw_value(GTK_SCALE(freq_scale), FALSE);
-/*	gtk_scale_set_digits(GTK_SCALE(vol_scale), 0);
-	gtk_scale_set_draw_value(GTK_SCALE(vol_scale), FALSE);
+	gtk_widget_set_size_request(drawing_area, DIGIT_WIDTH*6+10+SIGNAL_WIDTH+STEREO_WIDTH, DIGIT_HEIGTH+10);
 
-	gtk_toggle_button_set_active(GTK_TOGGLE_BUTTON(volume_button), mixer->get_volume() == 0);*/
+	gtk_container_add (GTK_CONTAINER (frame), drawing_area);
 
-	gtk_widget_set_size_request(drawing_area, DIGIT_WIDTH*6+10+SIGNAL_WIDTH+STEREO_WIDTH, DIGIT_HEIGTH+10);
+	digits = gdk_pixbuf_new_from_xpm_data ((const char**) digits_xpm);
+	signal_s = gdk_pixbuf_new_from_xpm_data ((const char**) signal_xpm);
+	stereo = gdk_pixbuf_new_from_xpm_data ((const char**) stereo_xpm);
+
+	menubox = gtk_box_new (GTK_ORIENTATION_VERTICAL, 0);
+
+	label = gtk_label_new (_("Presets:"));
+
+	preset_combo = gtk_combo_box_text_new ();
+	gtk_widget_set_size_request (preset_combo, 10, -1);
+
+	gtk_box_pack_start (GTK_BOX (box), frame, FALSE, FALSE, 3);
+	gtk_box_pack_start (GTK_BOX (box), menubox, TRUE, TRUE, 3);
+	gtk_box_pack_start (GTK_BOX (menubox), label, TRUE, TRUE, 0);
+	gtk_box_pack_start (GTK_BOX (menubox), preset_combo, TRUE, TRUE, 0);
+	gtk_box_pack_start (GTK_BOX (vbox), box, FALSE, FALSE, 4);
+
+	box = gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
+
+	pixbuf = gdk_pixbuf_new_from_xpm_data ((const char**) freq_down_xpm);
+	pixmap = gtk_image_new_from_pixbuf (pixbuf);
+
+	gtk_box_pack_start (GTK_BOX(box), pixmap, FALSE, FALSE, 2);
+
+	adj = GTK_ADJUSTMENT (gtk_adjustment_new (SUNSHINE*STEPS, FREQ_MIN*STEPS, FREQ_MAX*STEPS+1, 1, STEPS, 1));
+	freq_scale = gtk_scale_new (GTK_ORIENTATION_HORIZONTAL, adj);
+	gtk_scale_set_digits (GTK_SCALE (freq_scale), 0);
+	gtk_scale_set_draw_value (GTK_SCALE (freq_scale), FALSE);
+
+	gtk_box_pack_start (GTK_BOX(box), freq_scale, TRUE, TRUE, 0);
+
+	pixbuf = gdk_pixbuf_new_from_xpm_data ((const char**) freq_up_xpm);
+	pixmap = gtk_image_new_from_pixbuf (pixbuf);
+
+	gtk_box_pack_start (GTK_BOX (box), pixmap, FALSE, FALSE, 2);
+	gtk_box_pack_start (GTK_BOX (vbox), box, TRUE, TRUE, 2);
+
+	box = gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
+
+	scbw_button = gtk_button_new ();
+	image = gtk_image_new_from_icon_name ("media-seek-backward", GTK_ICON_SIZE_LARGE_TOOLBAR);
+	gtk_button_set_image (GTK_BUTTON (scbw_button), image);
+	gtk_button_set_relief (GTK_BUTTON (scbw_button), GTK_RELIEF_NONE);
+
+	gtk_box_pack_start (GTK_BOX (box), scbw_button, FALSE, FALSE, 2);
+
+	stbw_button = gtk_button_new ();
+	image = gtk_image_new_from_icon_name ("media-skip-backward", GTK_ICON_SIZE_LARGE_TOOLBAR);
+	gtk_button_set_image (GTK_BUTTON (stbw_button), image);
+	gtk_button_set_relief (GTK_BUTTON (stbw_button), GTK_RELIEF_NONE);
+
+	gtk_box_pack_start (GTK_BOX (box), stbw_button, FALSE, FALSE, 2);
+
+	stfw_button = gtk_button_new ();
+	image = gtk_image_new_from_icon_name ("media-skip-forward", GTK_ICON_SIZE_LARGE_TOOLBAR);
+	gtk_button_set_image (GTK_BUTTON (stfw_button), image);
+	gtk_button_set_relief (GTK_BUTTON (stfw_button), GTK_RELIEF_NONE);
+
+	gtk_box_pack_start (GTK_BOX (box), stfw_button, FALSE, FALSE, 2);
+
+	scfw_button = gtk_button_new ();
+	image = gtk_image_new_from_icon_name ("media-seek-forward", GTK_ICON_SIZE_LARGE_TOOLBAR);
+	gtk_button_set_image (GTK_BUTTON (scfw_button), image);
+	gtk_button_set_relief (GTK_BUTTON (scfw_button), GTK_RELIEF_NONE);
+
+	gtk_box_pack_start (GTK_BOX (box), scfw_button, FALSE, FALSE, 2);
+
+	vseparator = gtk_separator_new (GTK_ORIENTATION_VERTICAL);
+
+	gtk_box_pack_start (GTK_BOX (box), vseparator, FALSE, FALSE, 2);
+
+	volume_button = gtk_volume_button_new();
+	g_object_set (G_OBJECT (volume_button), "size", GTK_ICON_SIZE_LARGE_TOOLBAR, NULL);
+	g_object_set (G_OBJECT (volume_button), "use-symbolic", FALSE, NULL);
+	gtk_button_set_relief (GTK_BUTTON (volume_button), GTK_RELIEF_NONE);
+	gtk_widget_set_sensitive(volume_button, FALSE);
 
-	gtk_container_add(GTK_CONTAINER(frame), drawing_area);
+	gtk_box_pack_start (GTK_BOX (box), volume_button, FALSE, FALSE, 2);
 
-	gtk_box_pack_start(GTK_BOX(hbox2), scbw_button, FALSE, FALSE, 2);
-	gtk_box_pack_start(GTK_BOX(hbox2), stbw_button, FALSE, FALSE, 2);
-	gtk_box_pack_start(GTK_BOX(hbox2), stfw_button, FALSE, FALSE, 2);
-	gtk_box_pack_start(GTK_BOX(hbox2), scfw_button, FALSE, FALSE, 2);
-	gtk_box_pack_start(GTK_BOX(hbox2), vseparator1, FALSE, FALSE, 2);
-	gtk_box_pack_start(GTK_BOX(hbox2), volume_button, FALSE, FALSE, 2);
-	/*gtk_box_pack_start(GTK_BOX(hbox2), vseparator2, TRUE, TRUE, 3);*/
-	gtk_box_pack_start(GTK_BOX(hbox2), rec_button, FALSE, FALSE, 2);
-	gtk_box_pack_start(GTK_BOX(hbox2), vseparator4, FALSE, FALSE, 2);
-	/*gtk_box_pack_start(GTK_BOX(hbox2), help_button, FALSE, FALSE, 2);*/
-	gtk_box_pack_start(GTK_BOX(hbox2), prefs_button, FALSE, FALSE, 2);
-	gtk_box_pack_start(GTK_BOX(hbox2), about_button, FALSE, FALSE, 2);
-	/*gtk_box_pack_start(GTK_BOX(hbox2), quit_button, FALSE, FALSE, 2);*/
-
-	gtk_box_pack_start(GTK_BOX(hbox1), frame, FALSE, FALSE, 3);
-	gtk_box_pack_start(GTK_BOX(hbox1), menubox, TRUE, TRUE, 3);
-	
-	gtk_box_pack_start(GTK_BOX(menubox), label, TRUE, TRUE, 0);
-	gtk_box_pack_start(GTK_BOX(menubox), preset_combo, TRUE, TRUE, 0);
-
-	gtk_box_pack_start(GTK_BOX(freq_vol_box), freq_down_pixmap, FALSE, FALSE, 2);
-	gtk_box_pack_start(GTK_BOX(freq_vol_box), freq_scale, TRUE, TRUE, 0);
-	gtk_box_pack_start(GTK_BOX(freq_vol_box), freq_up_pixmap, FALSE, FALSE, 2);
-	/*gtk_box_pack_start(GTK_BOX(freq_vol_box), vseparator3, FALSE, FALSE, 2);
-	gtk_box_pack_start(GTK_BOX(freq_vol_box), vol_down_pixmap, FALSE, FALSE, 2);
-	gtk_box_pack_start(GTK_BOX(freq_vol_box), vol_scale, TRUE, TRUE, 0);
-	gtk_box_pack_start(GTK_BOX(freq_vol_box), vol_up_pixmap, FALSE, FALSE, 2);*/
-
-	gtk_box_pack_start(GTK_BOX(vbox), hbox1, FALSE, FALSE, 4);
-	gtk_box_pack_start(GTK_BOX(vbox), freq_vol_box, TRUE, TRUE, 2);
-	gtk_box_pack_start(GTK_BOX(vbox), hbox2, FALSE, FALSE, 4);
-	
-	gtk_frame_set_shadow_type(GTK_FRAME(frame), GTK_SHADOW_IN);
-
-	gtk_container_set_border_width(GTK_CONTAINER(vbox), 3);
-	gtk_container_set_border_width(GTK_CONTAINER(frame), 2);
-
-	/* gnome_app_set_contents(GNOME_APP(app), vbox); */
-
-	/*status = gnome_appbar_new(FALSE, TRUE, GNOME_PREFERENCES_NEVER);*/
-
-	/*gnome_app_set_statusbar(GNOME_APP(app), status);*/
-
-	g_signal_connect(G_OBJECT(app), "delete_event", G_CALLBACK(delete_event_cb), NULL);
-	g_signal_connect(G_OBJECT(quit_button), "clicked", G_CALLBACK(quit_button_clicked_cb), NULL);
-	g_signal_connect(G_OBJECT(adj), "value-changed", G_CALLBACK(adj_value_changed_cb), (gpointer) app);
-	volume_value_changed_id = g_signal_connect(G_OBJECT(volume_button), "value-changed", G_CALLBACK(volume_value_changed_cb), NULL);
-	g_signal_connect(G_OBJECT(stfw_button), "pressed", G_CALLBACK(step_button_pressed_cb), (gpointer)TRUE);
-	g_signal_connect(G_OBJECT(stbw_button), "pressed", G_CALLBACK(step_button_pressed_cb), (gpointer)FALSE);
-	g_signal_connect(G_OBJECT(stfw_button), "clicked", G_CALLBACK(step_button_clicked_cb), (gpointer)TRUE);
-	g_signal_connect(G_OBJECT(stbw_button), "clicked", G_CALLBACK(step_button_clicked_cb), (gpointer)FALSE);
-	g_signal_connect(G_OBJECT(stfw_button), "released", G_CALLBACK(step_button_released_cb), NULL);
-	g_signal_connect(G_OBJECT(stbw_button), "released", G_CALLBACK(step_button_released_cb), NULL);
-	g_signal_connect(G_OBJECT(scfw_button), "clicked", G_CALLBACK(scfw_button_clicked_cb), NULL);
-	g_signal_connect(G_OBJECT(scbw_button), "clicked", G_CALLBACK(scbw_button_clicked_cb), NULL);
-	g_signal_connect(G_OBJECT(about_button), "clicked", G_CALLBACK(about_button_clicked_cb), NULL);
-	g_signal_connect(G_OBJECT(rec_button), "clicked", G_CALLBACK(rec_button_clicked_cb), (gpointer) app);
-	g_signal_connect(G_OBJECT(prefs_button), "clicked", G_CALLBACK(prefs_button_clicked_cb), (gpointer) app);
-	g_signal_connect(G_OBJECT(drawing_area), "draw", G_CALLBACK(draw_cb), NULL);
-
-	gtk_widget_set_tooltip_text(scbw_button, _("Scan Backwards"));
-	gtk_widget_set_tooltip_text(scfw_button, _("Scan Forwards"));
-	gtk_widget_set_tooltip_text(stbw_button, _("0.05 MHz Backwards"));
-	gtk_widget_set_tooltip_text(stfw_button, _("0.05 MHz Forwards"));
-	gtk_widget_set_tooltip_text(about_button, _("About"));
-	gtk_widget_set_tooltip_text(rec_button, _("Record radio as MP3, OGG, FLAC or M4A"));
-	gtk_widget_set_tooltip_text(prefs_button, _("Preferences"));
-	gtk_widget_set_tooltip_text(volume_button, _("Adjust the Volume"));
-	gtk_widget_set_tooltip_text(quit_button, _("Quit"));
-	text = g_strdup_printf(_("Frequency: %.2f MHz"), gtk_adjustment_get_value(adj)/STEPS);
-	gtk_widget_set_tooltip_text(freq_scale, text);
-	g_free(text);
-/*	text = g_strdup_printf(_("Volume: %d%%"), (gint)volume->value);
-	gtk_widget_set_tooltip_text(vol_scale, text);
-	g_free(text);*/
+	rec_button = gtk_button_new ();
+	image = gtk_image_new_from_icon_name ("media-record", GTK_ICON_SIZE_LARGE_TOOLBAR);
+	gtk_button_set_image (GTK_BUTTON (rec_button), image);
+	gtk_button_set_relief (GTK_BUTTON (rec_button), GTK_RELIEF_NONE);
+
+	gtk_box_pack_start (GTK_BOX (box), rec_button, FALSE, FALSE, 2);
+
+	vseparator = gtk_separator_new (GTK_ORIENTATION_VERTICAL);
+
+	gtk_box_pack_start (GTK_BOX (box), vseparator, FALSE, FALSE, 2);
+
+	prefs_button = gtk_button_new ();
+	image = gtk_image_new_from_icon_name ("document-properties", GTK_ICON_SIZE_LARGE_TOOLBAR);
+	gtk_button_set_image (GTK_BUTTON (prefs_button), image);
+	gtk_button_set_relief (GTK_BUTTON (prefs_button), GTK_RELIEF_NONE);
+
+	gtk_box_pack_start (GTK_BOX (box), prefs_button, FALSE, FALSE, 2);
+
+	about_button = gtk_button_new ();
+	image = gtk_image_new_from_icon_name ("help-about", GTK_ICON_SIZE_LARGE_TOOLBAR);
+	gtk_button_set_image (GTK_BUTTON (about_button), image);
+	gtk_button_set_relief (GTK_BUTTON (about_button), GTK_RELIEF_NONE);
+
+	gtk_box_pack_start (GTK_BOX (box), about_button, FALSE, FALSE, 2);
+
+/*	quit_button = gtk_button_new ();
+	image = gtk_image_new_from_icon_name ("application-exit", GTK_ICON_SIZE_LARGE_TOOLBAR);
+	gtk_button_set_image (GTK_BUTTON (quit_button), image);
+	gtk_button_set_relief (GTK_BUTTON (quit_button), GTK_RELIEF_NONE);
+
+	gtk_box_pack_start (GTK_BOX (box), quit_button, FALSE, FALSE, 2); */
+
+	gtk_box_pack_start (GTK_BOX (vbox), box, FALSE, FALSE, 4);
+
+	g_signal_connect (G_OBJECT (app), "delete_event", G_CALLBACK (delete_event_cb), NULL);
+	g_signal_connect (G_OBJECT (drawing_area), "draw", G_CALLBACK (draw_cb), NULL);
+	g_signal_connect (G_OBJECT (preset_combo), "changed", G_CALLBACK (preset_combo_change_cb), NULL);
+	g_signal_connect (G_OBJECT (adj), "value-changed", G_CALLBACK (adj_value_changed_cb), (gpointer) app);
+	g_signal_connect (G_OBJECT (scbw_button), "clicked", G_CALLBACK (scbw_button_clicked_cb), NULL);
+	g_signal_connect (G_OBJECT (stbw_button), "pressed", G_CALLBACK (step_button_pressed_cb), (gpointer) FALSE);
+	g_signal_connect (G_OBJECT (stbw_button), "clicked", G_CALLBACK (step_button_clicked_cb), (gpointer) FALSE);
+	g_signal_connect (G_OBJECT (stbw_button), "released", G_CALLBACK (step_button_released_cb), NULL);
+	g_signal_connect (G_OBJECT (stfw_button), "pressed", G_CALLBACK (step_button_pressed_cb), (gpointer) TRUE);
+	g_signal_connect (G_OBJECT (stfw_button), "clicked", G_CALLBACK (step_button_clicked_cb), (gpointer) TRUE);
+	g_signal_connect (G_OBJECT (stfw_button), "released", G_CALLBACK (step_button_released_cb), NULL);
+	g_signal_connect (G_OBJECT (scfw_button), "clicked", G_CALLBACK (scfw_button_clicked_cb), NULL);
+	volume_value_changed_id = g_signal_connect (G_OBJECT (volume_button), "value-changed", G_CALLBACK (volume_value_changed_cb), NULL);
+	g_signal_connect (G_OBJECT (rec_button), "clicked", G_CALLBACK (rec_button_clicked_cb), (gpointer) app);
+	g_signal_connect (G_OBJECT (prefs_button), "clicked", G_CALLBACK (prefs_button_clicked_cb), (gpointer) app);
+	g_signal_connect (G_OBJECT (about_button), "clicked", G_CALLBACK (about_button_clicked_cb), NULL);
+/*	g_signal_connect (G_OBJECT (quit_button), "clicked", G_CALLBACK (quit_button_clicked_cb), NULL); */
+
+	gtk_widget_set_tooltip_text (scbw_button, _("Scan Backwards"));
+	gtk_widget_set_tooltip_text (stbw_button, _("0.05 MHz Backwards"));
+	gtk_widget_set_tooltip_text (stfw_button, _("0.05 MHz Forwards"));
+	gtk_widget_set_tooltip_text (scfw_button, _("Scan Forwards"));
+	gtk_widget_set_tooltip_text (volume_button, _("Adjust the Volume"));
+	gtk_widget_set_tooltip_text (rec_button, _("Record radio as MP3, OGG, FLAC or M4A"));
+	gtk_widget_set_tooltip_text (prefs_button, _("Preferences"));
+	gtk_widget_set_tooltip_text (about_button, _("About"));
+/*	gtk_widget_set_tooltip_text (quit_button, _("Quit")); */
+
+	text = g_strdup_printf (_("Frequency: %.2f MHz"), gtk_adjustment_get_value (adj)/STEPS);
+	gtk_widget_set_tooltip_text (freq_scale, text);
+	g_free (text);
 
 	gtk_container_add (GTK_CONTAINER (app), vbox);
 	gtk_widget_show_all (vbox);
@@ -1512,15 +1510,15 @@ static DBusGProxy * connect_to_session (
 	connection = dbus_g_bus_get (DBUS_BUS_SYSTEM, &error);
 
 	if (error) {
-		g_warning ("%s", error->message);
+		g_warning ("Could not connect to system bus: %s", error->message);
 		g_error_free(error);
 		return NULL;
 	}
 	/* Get the current session object */
 	proxy = dbus_g_proxy_new_for_name (connection,
-					"org.gnome.SessionManager",
-					"/org/gnome/SessionManager",
-					"org.gnome.SessionManager");
+					   "org.gnome.SessionManager",
+					   "/org/gnome/SessionManager",
+					   "org.gnome.SessionManager");
 
 	if (!proxy) {
 		g_warning ("Unable to get the SessionManager.");
