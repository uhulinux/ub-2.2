diff -Naur sysvinit-2.86.orig/po/update sysvinit-2.86/po/update
--- sysvinit-2.86.orig/po/update	1970-01-01 01:00:00.000000000 +0100
+++ sysvinit-2.86/po/update	2006-03-29 19:32:44.000000000 +0200
@@ -0,0 +1,8 @@
+#!/bin/bash
+
+xgettext --directory=.. --output=sysvinit.pot --keyword=_ src/init.c
+
+for i in *.po; do
+	msgmerge "$i" sysvinit.pot > "$i.new"
+	mv "$i.new" "$i"
+done
diff -Naur sysvinit-2.86.orig/src/init.c sysvinit-2.86/src/init.c
--- sysvinit-2.86.orig/src/init.c	2004-07-30 14:16:20.000000000 +0200
+++ sysvinit-2.86/src/init.c	2006-03-29 19:35:34.000000000 +0200
@@ -42,6 +42,9 @@
 #include <stdarg.h>
 #include <sys/syslog.h>
 #include <sys/time.h>
+#include <locale.h>
+#include <libintl.h>
+#define _ gettext
 
 #ifdef __i386__
 #  if (__GLIBC__ >= 2)
@@ -82,7 +85,6 @@
 
 /* Version information */
 char *Version = "@(#) init " VERSION "  " DATE "  miquels@cistron.nl";
-char *bootmsg = "version " VERSION " %s";
 #define E_VERSION "INIT_VERSION=sysvinit-" VERSION
 
 CHILD *family = NULL;		/* The linked list of all entries */
@@ -218,7 +220,7 @@
 	void	*m;
 
 	while ((m = malloc(size)) == NULL) {
-		initlog(L_VB, "out of memory");
+		initlog(L_VB, _("out of memory"));
 		do_sleep(5);
 	}
 	memset(m, 0, size);
@@ -640,8 +642,8 @@
 	if ((void *)ctx.eip >= (void *)do_sleep &&
 	    (void *)ctx.eip < (void *)main)
 		p = " (code)";
-	initlog(L_VB, "PANIC: segmentation violation at %p%s! "
-		  "sleeping for 30 seconds.", (void *)ctx.eip, p);
+	initlog(L_VB, _("PANIC: segmentation violation at %p%s! "
+		  "sleeping for 30 seconds."), (void *)ctx.eip, p);
 	coredump();
 	do_sleep(30);
 	errno = saved_errno;
@@ -652,7 +654,7 @@
 	int	saved_errno = errno;
 
 	initlog(L_VB,
-		"PANIC: segmentation violation! sleeping for 30 seconds.");
+		_("PANIC: segmentation violation! sleeping for 30 seconds."));
 	coredump();
 	do_sleep(30);
 	errno = saved_errno;
@@ -681,7 +683,7 @@
 	int fd;
 
 	if ((fd = console_open(O_RDWR|O_NOCTTY)) < 0) {
-		initlog(L_VB, "can't open %s", console_dev);
+		initlog(L_VB, _("can't open %s"), console_dev);
 		return;
 	}
 
@@ -861,7 +863,7 @@
 	if (ch->count >= MAXSPAWN) {
 
 	  initlog(L_VB,
-		"Id \"%s\" respawning too fast: disabled for %d minutes",
+		_("Id \"%s\" respawning too fast: disabled for %d minutes"),
 		ch->id, SLEEPTIME / 60);
 	  ch->flags &= ~RUNNING;
 	  ch->flags |= FAILING;
@@ -967,7 +969,7 @@
   				dup(f);
 			}
 			if ((pid = fork()) < 0) {
-  				initlog(L_VB, "cannot fork");
+  				initlog(L_VB, _("cannot fork"));
 				exit(1);
 			}
 			if (pid > 0) {
@@ -997,7 +999,7 @@
 				 *	this with a temporary process.
 				 */
 				if ((pid = fork()) < 0) {
-  					initlog(L_VB, "cannot fork");
+  					initlog(L_VB, _("cannot fork"));
 					exit(1);
 				}
 				if (pid == 0) {
@@ -1017,7 +1019,7 @@
   		} else {
 			setsid();
 			if ((f = console_open(O_RDWR|O_NOCTTY)) < 0) {
-				initlog(L_VB, "open(%s): %s", console_dev,
+				initlog(L_VB, _("open(%s): %s"), console_dev,
 					strerror(errno));
 				f = open("/dev/null", O_RDWR);
 			}
@@ -1043,7 +1045,7 @@
   			args[4] = NULL;
 			execvp(args[1], args + 1);
 		}
-  		initlog(L_VB, "cannot execute \"%s\"", args[1]);
+  		initlog(L_VB, _("cannot execute \"%s\""), args[1]);
   		exit(1);
   	}
 	*res = pid;
@@ -1052,7 +1054,7 @@
 	INITDBG(L_VB, "Started id %s (pid %d)", ch->id, pid);
 
 	if (pid == -1) {
-		initlog(L_VB, "cannot fork, retry..");
+		initlog(L_VB, _("cannot fork, retry.."));
 		do_sleep(5);
 		continue;
 	}
@@ -1139,7 +1141,7 @@
    *	Open INITTAB and real line by line.
    */
   if ((fp = fopen(INITTAB, "r")) == NULL)
-	initlog(L_VB, "No inittab file found");
+	initlog(L_VB, _("No inittab file found"));
 
   while(!done) {
 	/*
@@ -1178,22 +1180,22 @@
 	 *	avoid newbie postings on comp.os.linux.setup :)
 	 */
 	err[0] = 0;
-	if (!id || !*id) strcpy(err, "missing id field");
-	if (!rlevel)     strcpy(err, "missing runlevel field");
-	if (!process)    strcpy(err, "missing process field");
+	if (!id || !*id) strcpy(err, _("missing id field"));
+	if (!rlevel)     strcpy(err, _("missing runlevel field"));
+	if (!process)    strcpy(err, _("missing process field"));
 	if (!action || !*action)
-			strcpy(err, "missing action field");
+			strcpy(err, _("missing action field"));
 	if (id && strlen(id) > sizeof(utproto.ut_id))
-		sprintf(err, "id field too long (max %d characters)",
+		sprintf(err, _("id field too long (max %d characters)"),
 			(int)sizeof(utproto.ut_id));
 	if (rlevel && strlen(rlevel) > 11)
-		strcpy(err, "rlevel field too long (max 11 characters)");
+		strcpy(err, _("rlevel field too long (max 11 characters)"));
 	if (process && strlen(process) > 127)
-		strcpy(err, "process field too long");
+		strcpy(err, _("process field too long"));
 	if (action && strlen(action) > 32)
-		strcpy(err, "action field too long");
+		strcpy(err, _("action field too long"));
 	if (err[0] != 0) {
-		initlog(L_VB, "%s[%d]: %s", INITTAB, lineNo, err);
+		initlog(L_VB, _("%s[%d]: %s"), INITTAB, lineNo, err);
 		INITDBG(L_VB, "%s:%s:%s:%s", id, rlevel, action, process);
 		continue;
 	}
@@ -1208,7 +1210,7 @@
 			break;
 		}
 	if (actionNo == -1) {
-		initlog(L_VB, "%s[%d]: %s: unknown action field",
+		initlog(L_VB, _("%s[%d]: %s: unknown action field"),
 			INITTAB, lineNo, action);
 		continue;
 	}
@@ -1218,7 +1220,7 @@
 	 */
 	for(old = newFamily; old; old = old->next) {
 		if(strcmp(old->id, id) == 0 && strcmp(id, "~~")) {
-			initlog(L_VB, "%s[%d]: duplicate ID field \"%s\"",
+			initlog(L_VB, _("%s[%d]: duplicate ID field \"%s\""),
 				INITTAB, lineNo, id);
 			break;
 		}
@@ -1373,14 +1375,14 @@
 		case 0: /* Send TERM signal */
 			if (talk)
 				initlog(L_CO,
-					"Sending processes the TERM signal");
+					_("Sending processes the TERM signal"));
 			kill(-(ch->pid), SIGTERM);
 			foundOne = 1;
 			break;
 		case 1: /* Send KILL signal and collect status */
 			if (talk)
 				initlog(L_CO,
-					"Sending processes the KILL signal");
+					_("Sending processes the KILL signal"));
 			kill(-(ch->pid), SIGKILL);
 			break;
 	}
@@ -1420,7 +1422,7 @@
   for(ch = family; ch; ch = ch->next)
 	if (ch->flags & KILLME) {
 		if (!(ch->flags & ZOMBIE))
-		    initlog(L_CO, "Pid %d [id %s] seems to hang", ch->pid,
+		    initlog(L_CO, _("Pid %d [id %s] seems to hang"), ch->pid,
 				ch->id);
 		else {
 		    INITDBG(L_VB, "Updating utmp for pid %d [id %s]",
@@ -1583,7 +1585,7 @@
 		if (islower(lvl)) lvl = toupper(lvl);
 		if (strchr("0123456789S", lvl) == NULL) {
 			initlog(L_VB,
-				"Initdefault level '%c' is invalid", lvl);
+				_("Initdefault level '%c' is invalid"), lvl);
 			lvl = 0;
 		}
 	}
@@ -1633,7 +1635,7 @@
 #endif
 		if (fp == NULL) {
 			/* INITLVL file empty or not there - act as 'init q' */
-			initlog(L_SY, "Re-reading inittab");
+			initlog(L_SY, _("Re-reading inittab"));
   			return(runlevel);
 		}
 		ok = fscanf(fp, "%c %d", &foo, &st);
@@ -1649,29 +1651,29 @@
 
 	if (islower(foo)) foo = toupper(foo);
 	if (ok < 1 || ok > 2 || strchr("QS0123456789ABCU", foo) == NULL) {
- 		initlog(L_VB, "bad runlevel: %c", foo);
+ 		initlog(L_VB, _("bad runlevel: %c"), foo);
   		return runlevel;
 	}
 
 	/* Log this action */
 	switch(foo) {
 		case 'S':
-  			initlog(L_VB, "Going single user");
+  			initlog(L_VB, _("Going single user"));
 			break;
 		case 'Q':
-			initlog(L_SY, "Re-reading inittab");
+			initlog(L_SY, _("Re-reading inittab"));
 			break;
 		case 'A':
 		case 'B':
 		case 'C':
 			initlog(L_SY,
-				"Activating demand-procedures for '%c'", foo);
+				_("Activating demand-procedures for '%c'"), foo);
 			break;
 		case 'U':
-			initlog(L_SY, "Trying to re-exec init");
+			initlog(L_SY, _("Trying to re-exec init"));
 			return 'U';
 		default:
-		  	initlog(L_VB, "Switching to runlevel: %c", foo);
+		  	initlog(L_VB, _("Switching to runlevel: %c"), foo);
 	}
 
 	if (foo == 'Q') return runlevel;
@@ -1894,7 +1896,7 @@
 	close(STATE_PIPE);
 	sigprocmask(SIG_SETMASK, &oldset, NULL);
 	init_freeenv(env);
-	initlog(L_CO, "Attempt to re-exec failed");
+	initlog(L_CO, _("Attempt to re-exec failed"));
 }
 
 
@@ -2034,7 +2036,7 @@
 	if ((pipe_fd = open(INIT_FIFO, O_RDWR|O_NONBLOCK)) >= 0) {
 		fstat(pipe_fd, &st);
 		if (!S_ISFIFO(st.st_mode)) {
-			initlog(L_VB, "%s is not a fifo", INIT_FIFO);
+			initlog(L_VB, _("%s is not a fifo"), INIT_FIFO);
 			close(pipe_fd);
 			pipe_fd = -1;
 		}
@@ -2081,7 +2083,7 @@
 	}
 	if (n <= 0) {
 		if (errno == EINTR) return;
-		initlog(L_VB, "error reading initrequest");
+		initlog(L_VB, _("error reading initrequest"));
 		continue;
 	}
 
@@ -2095,7 +2097,7 @@
 	 *	Process request.
 	 */
 	if (request.magic != INIT_MAGIC || n != sizeof(request)) {
-		initlog(L_VB, "got bogus initrequest");
+		initlog(L_VB, _("got bogus initrequest"));
 		continue;
 	}
 	switch(request.cmd) {
@@ -2135,7 +2137,7 @@
 			quit = 1;
 			break;
 		default:
-			initlog(L_VB, "got unimplemented initrequest.");
+			initlog(L_VB, _("got unimplemented initrequest."));
 			break;
 	}
   }
@@ -2214,7 +2216,7 @@
 		default:
 			if (warn)
 			  initlog(L_VB,
-				"no more processes left in this runlevel");
+				_("no more processes left in this runlevel"));
 			warn = 0;
 			loglevel = -1;
 			if (got_signals == 0)
@@ -2222,7 +2224,7 @@
 			break;
 	}
 	if (loglevel > 0) {
-		initlog(L_VB, "Entering runlevel: %c", runlevel);
+		initlog(L_VB, _("Entering runlevel: %c"), runlevel);
 		write_utmp_wtmp("runlevel", "~~", runlevel + 256 * oldlevel, RUN_LVL, "~");
 		thislevel = runlevel;
 		prevlevel = oldlevel;
@@ -2421,11 +2423,6 @@
   	(void) close(open(UTMP_FILE, O_WRONLY|O_CREAT|O_TRUNC, 0644));
 
   	/*
-	 *	Say hello to the world
-	 */
-  	initlog(L_CO, bootmsg, "booting");
-
-  	/*
 	 *	See if we have to start an emergency shell.
 	 */
 	if (emerg_shell) {
@@ -2448,7 +2445,7 @@
 	/*
 	 *	Restart: unblock signals and let the show go on
 	 */
-	initlog(L_CO, bootmsg, "reloading");
+	initlog(L_CO, _("reloading"), VERSION);
 	sigfillset(&sgt);
 	sigprocmask(SIG_UNBLOCK, &sgt, NULL);
   }
@@ -2495,7 +2492,7 @@
  */
 void usage(char *s)
 {
-	fprintf(stderr, "Usage: %s 0123456SsQqAaBbCcUu\n", s);
+	fprintf(stderr, _("Usage: %s 0123456SsQqAaBbCcUu\n"), s);
 	exit(1);
 }
 
@@ -2521,8 +2518,8 @@
 				env = request.i.data;
 			l = strlen(optarg);
 			if (env + l + 2 > request.i.data + sizeof(request.i.data)) {
-				fprintf(stderr, "%s: -e option data "
-					"too large\n", progname);
+				fprintf(stderr, _("%s: -e option data "
+					"too large\n"), progname);
 				exit(1);
 			}
 			memcpy(env, optarg, l);
@@ -2567,7 +2564,7 @@
 
 		/* Now write the new runlevel. */
 		if ((fp = fopen(INITLVL, "w")) == NULL) {
-			fprintf(stderr, "%s: cannot create %s\n",
+			fprintf(stderr, _("%s: cannot create %s\n"),
 				progname, INITLVL);
 			exit(1);
 		}
@@ -2583,7 +2580,7 @@
 
 	fprintf(stderr, "%s: ", progname);
 	if (ISMEMBER(got_signals, SIGALRM)) {
-		fprintf(stderr, "timeout opening/writing control channel %s\n",
+		fprintf(stderr, _("timeout opening/writing control channel %s\n"),
 			INIT_FIFO);
 	} else {
 		perror(INIT_FIFO);
@@ -2596,9 +2593,33 @@
  */
 int main(int argc, char **argv)
 {
-	char			*p;
+	char			*p, *q;
 	int			f;
 	int			isinit;
+	int			i;
+	char			buf[32];
+
+	p = setlocale(LC_CTYPE, "");
+	q = setlocale(LC_MESSAGES, "");
+	if ((!strcasecmp(p, "C") || !strcasecmp(p, "POSIX"))
+	 && (!strcasecmp(q, "C") || !strcasecmp(q, "POSIX"))) {
+		f = open("/etc/sysconfig/locale", O_RDONLY);
+		if (f >= 0) {
+			i = read(f, buf, 32);
+			if (i > 0 && i < 32) {
+				buf[i] = '\0';
+				i = strcspn(buf, " \t\r\n");
+				buf[i] = '\0';
+				if (buf[0] != '\0') {
+					setlocale(LC_CTYPE, buf);
+					setlocale(LC_MESSAGES, buf);
+				}
+			}
+			close(f);
+		}
+	}
+	bindtextdomain("sysvinit", "/usr/share/locale");
+	textdomain("sysvinit");
 
 	/* Get my own name */
 	if ((p = strrchr(argv[0], '/')) != NULL)
@@ -2609,7 +2630,7 @@
 
 	/* Quick check */
 	if (geteuid() != 0) {
-		fprintf(stderr, "%s: must be superuser.\n", p);
+		fprintf(stderr, _("%s: must be superuser.\n"), p);
 		exit(1);
 	}
 
