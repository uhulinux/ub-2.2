diff -Naurdp a/data/keymaps/i386/include/alt_shift_toggle.map b/data/keymaps/i386/include/alt_shift_toggle.map
--- a/data/keymaps/i386/include/alt_shift_toggle.map	1970-01-01 01:00:00.000000000 +0100
+++ b/data/keymaps/i386/include/alt_shift_toggle.map	2009-12-03 11:27:24.253403170 +0100
@@ -0,0 +1,12 @@
+	alt	keycode  42 = CtrlR_Lock
+ctrlr	alt	keycode  42 = CtrlR_Lock
+	altgr	keycode  42 = CtrlR_Lock
+ctrlr	altgr	keycode  42 = CtrlR_Lock
+	alt	keycode  54 = CtrlR_Lock
+ctrlr	alt	keycode  54 = CtrlR_Lock
+	altgr	keycode  54 = CtrlR_Lock
+ctrlr	altgr	keycode  54 = CtrlR_Lock
+	shift	keycode  56 = CtrlR_Lock
+ctrlr	shift	keycode  56 = CtrlR_Lock
+	shift	keycode 100 = CtrlR_Lock
+ctrlr	shift	keycode 100 = CtrlR_Lock
diff -Naurdp a/man/man1/loadkeys.1.in b/man/man1/loadkeys.1.in
--- a/man/man1/loadkeys.1.in	2008-10-23 21:03:59.000000000 +0200
+++ b/man/man1/loadkeys.1.in	2009-12-03 11:27:24.253403170 +0100
@@ -75,6 +75,14 @@ while the keymap format is given in
 .BR keymaps (5)
 and can also be seen from the output of
 .BR dumpkeys (1).
+.LP
+As an UHU-Linux extension, a keymap filename can be prefixed by
+a `+' sign, which causes all the modifier definitions to be XORed
+by 128 (i.e. toggle the state of CtrlR_Lock). This allows to load
+two maps at the same time and have a shortcut key to switch between
+them, for example: `loadkeys us +hu alt_shift_toggle'. If later on
+you load a single keymap while the secondary group is active and no
+keys seem to work at all, use Alt+Shift to release CtrlR_Lock.
 .SH "LOAD KERNEL ACCENT TABLE"
 If the input file does not contain any compose key definitions,
 the kernel accent table is left unchanged, unless the
diff -Naurdp a/src/loadkeys.y b/src/loadkeys.y
--- a/src/loadkeys.y	2009-12-03 11:27:24.209403166 +0100
+++ b/src/loadkeys.y	2009-12-03 11:32:31.900403049 +0100
@@ -38,8 +38,10 @@
 /* What keymaps are we defining? */
 char defining[MAX_NR_KEYMAPS];
 char keymaps_line_seen = 0;
-int max_keymap = 0;		/* from here on, defining[] is false */
 int alt_is_meta = 0;
+int table_xor = 0;
+int size_of_one_keymap = 256; /* MAX_NR_KEYMAPS */
+int foolproof = 1;
 
 /* the kernel structures we want to set or print */
 u_short *key_map[MAX_NR_KEYMAPS];
@@ -47,7 +49,9 @@ char *func_table[MAX_NR_FUNC];
 struct kbdiacr accent_table[MAX_DIACR];
 unsigned int accent_table_size = 0;
 
-char key_is_constant[NR_KEYS];
+char key_is_constant0[NR_KEYS];
+char key_is_constant1[NR_KEYS];
+char *key_is_constant = key_is_constant0;
 char *keymap_was_set[MAX_NR_KEYMAPS];
 char func_buf[4096];		/* should be allocated dynamically */
 char *fp = func_buf;
@@ -62,7 +66,7 @@ static void addfunc(struct kbsentry kbs_
 static void killkey(int index, int table);
 static void compose(int diacr, int base, int res);
 static void do_constant(void);
-static void do_constant_key (int, u_short);
+static void do_constant_key (int, u_short, int, int);
 static void loadkeys(char *console, int *warned);
 static void mktable(void);
 static void bkeymap(void);
@@ -201,14 +205,14 @@ fullline	: KEYCODE NUMBER EQUALS rvalue0
 	      /* On the other hand, we now have include files,
 		 and it should be possible to override lines
 		 from an include file. So, kill old defs. */
-	      for (j = 0; j < max_keymap; j++)
-		if (defining[j])
+	      for (j = 0; j < size_of_one_keymap; j++)
+		if (defining[j ^ table_xor])
 		  killkey($2, j);
 	    }
 	    if (keymaps_line_seen) {
 		i = 0;
-		for (j = 0; j < max_keymap; j++)
-		  if (defining[j]) {
+		for (j = 0; j < size_of_one_keymap; j++)
+		  if (defining[j ^ table_xor]) {
 		      if (rvalct != 1 || i == 0)
 			addkey($2, j, (i < rvalct) ? key_buf[i] : K_HOLE);
 		      i++;
@@ -226,7 +230,7 @@ rvalue0		: 
 		;
 rvalue1		: rvalue
 			{
-			    if (rvalct >= MAX_NR_KEYMAPS)
+			    if (rvalct >= size_of_one_keymap)
 				lkfatal(_("too many key definitions on one line"));
 			    key_buf[rvalct++] = $1;
 			}
@@ -264,6 +268,7 @@ usage(void) {
 "  -s --clearstrings  clear kernel string table\n"
 "  -u --unicode       implicit conversion to Unicode\n"
 "     --no-unicode    don't perform implicit conversion to Unicode\n"
+"     --no-foolproof  don't force CtrlR+Alt+Shift to unlock CtrlR\n"
 "  -v --verbose       report the changes\n"), PACKAGE_VERSION, DEFMAP);
 	exit(1);
 }
@@ -279,6 +284,7 @@ int nocompose = 0;
 
 int
 main(int argc, char *argv[]) {
+	char **args2;
 	const char *short_opts = "bcC:dhmsuqvV";
 	const struct option long_opts[] = {
 		{ "bkeymap",    no_argument, NULL, 'b' },
@@ -290,6 +296,7 @@ main(int argc, char *argv[]) {
 		{ "clearstrings", no_argument, NULL, 's' },
 		{ "unicode",	no_argument, NULL, 'u' },
 		{ "no-unicode",	no_argument, NULL, 299 },
+		{ "no-foolproof", no_argument, NULL, 300 },
 		{ "quiet",	no_argument, NULL, 'q' },
 		{ "verbose",    no_argument, NULL, 'v' },
 		{ "version",	no_argument, NULL, 'V' },
@@ -333,6 +340,9 @@ main(int argc, char *argv[]) {
 			case 299:
 				no_unicode = 1;
 				break;
+			case 300:
+				foolproof = 0;
+				break;
 			case 'q':
 				quiet = 1;
 				break;
@@ -351,6 +361,14 @@ main(int argc, char *argv[]) {
 		set_charset("unicode");
 	}
 	args = argv + optind - 1;
+	args2 = args;
+	while (*args2 != NULL) {
+		if (**args2 == '+') {
+			size_of_one_keymap = 128;
+			break;
+		}
+		args2++;
+	}
 	unicode_used = 0;
 	yywrap();	/* set up the first input file, if any */
 	if (yyparse() || private_error_ct) {
@@ -650,6 +668,14 @@ yywrap(void) {
 		args++;
 	if (!*args)
 		return 1;
+	if (**args != '+') {
+		table_xor = 0;
+		key_is_constant = key_is_constant0;
+	} else {
+		(*args)++;
+		table_xor = 128;
+		key_is_constant = key_is_constant1;
+	}
 	if (!strcmp(*args, "-")) {
 		f = stdin;
 		strcpy(pathname, "<stdin>");
@@ -679,13 +705,13 @@ addmap(int i, int explicit) {
 	if (i < 0 || i >= MAX_NR_KEYMAPS)
 	    lkfatal0(_("addmap called with bad index %d"), i);
 
+	i ^= table_xor;
+
 	if (!defining[i]) {
 	    if (keymaps_line_seen && !explicit)
 		lkfatal0(_("adding map %d violates explicit keymaps line"), i);
 
 	    defining[i] = 1;
-	    if (max_keymap <= i)
-	      max_keymap = i+1;
 	}
 }
 
@@ -698,6 +724,9 @@ killkey(int index, int table) {
 	        lkfatal0(_("killkey called with bad index %d"), index);
         if (table < 0 || table >= MAX_NR_KEYMAPS)
 	        lkfatal0(_("killkey called with bad table %d"), table);
+
+	table ^= table_xor;
+
 	if (key_map[table])
 		(key_map[table])[index] = K_HOLE;
 	if (keymap_was_set[table])
@@ -705,8 +734,10 @@ killkey(int index, int table) {
 }
 
 static void
-addkey(int index, int table, int keycode) {
+addkey(int index, int table_orig, int keycode) {
 	int i;
+	
+	int table = table_orig ^ table_xor;
 
 	if (keycode == CODE_FOR_UNKNOWN_KSYM)
 	  /* is safer not to be silent in this case, 
@@ -714,11 +745,11 @@ addkey(int index, int table, int keycode
 	        lkfatal0(_("addkey called with bad keycode %d"), keycode);
         if (index < 0 || index >= NR_KEYS)
 	        lkfatal0(_("addkey called with bad index %d"), index);
-        if (table < 0 || table >= MAX_NR_KEYMAPS)
-	        lkfatal0(_("addkey called with bad table %d"), table);
+        if (table_orig < 0 || table_orig >= MAX_NR_KEYMAPS)
+	        lkfatal0(_("addkey called with bad table %d"), table_orig);
 
 	if (!defining[table])
-		addmap(table, 0);
+		addmap(table_orig, 0);
 	if (!key_map[table]) {
 	        key_map[table] = (u_short *)xmalloc(NR_KEYS * sizeof(u_short));
 		for (i = 0; i < NR_KEYS; i++)
@@ -737,14 +768,15 @@ addkey(int index, int table, int keycode
 	(keymap_was_set[table])[index] = 1;
 
 	if (alt_is_meta) {
-	     int alttable = table | M_ALT;
+	     int alttable_orig = table_orig | M_ALT;
+	     int alttable = alttable_orig ^ table_xor;
 	     int type = KTYP(keycode);
 	     int val = KVAL(keycode);
 	     if (alttable != table && defining[alttable] &&
 		 (!keymap_was_set[alttable] ||
 		  !(keymap_was_set[alttable])[index]) &&
 		 (type == KT_LATIN || type == KT_LETTER) && val < 128)
-		  addkey(index, alttable, K(KT_META, val));
+		  addkey(index, alttable_orig, K(KT_META, val));
 	}
 }
 
@@ -892,6 +924,13 @@ defkeys(int fd, char *cons, int *warned)
 	    }
 	}
 
+	if (foolproof) {
+		ke.kb_index = 42; /* keycode: ShiftL on pc's */
+		ke.kb_table = (1<<KG_ALT) | (1<<KG_CTRLR); /* 136: AltL + ShiftL */
+		ke.kb_value = K_CTRLRLOCK; /* 2567 */
+		ioctl(fd, KDSKBENT, (unsigned long)&ke);
+	}
+
 	if(unicode_used && oldm != K_UNICODE) {
 	     if (ioctl(fd, KDSKBMODE, oldm)) {
 		  fprintf(stderr, _("%s: failed to restore keyboard mode\n"),
@@ -990,7 +1029,7 @@ defdiacs(int fd){
 }
 
 void
-do_constant_key (int i, u_short key) {
+do_constant_key (int i, u_short key, int from, int len) {
 	int typ, val, j;
 
 	typ = KTYP(key);
@@ -1007,21 +1046,21 @@ do_constant_key (int i, u_short key) {
 			defs[j] = K(KT_LATIN, val & ~96);
 		for(j=8; j<16; j++)
 			defs[j] = K(KT_META, KVAL(defs[j-8]));
-		for(j=0; j<max_keymap; j++) {
+		for(j=from; j<from+len; j++) {
 			if (!defining[j])
 				continue;
-			if (j > 0 &&
+			if (j > from &&
 			    keymap_was_set[j] && (keymap_was_set[j])[i])
 				continue;
-			addkey(i, j, defs[j%16]);
+			addkey(i, j ^ table_xor, defs[j%16]);
 		}
 	} else {
 		/* do this also for keys like Escape,
 		   as promised in the man page */
-		for (j=1; j<max_keymap; j++)
+		for (j=from+1; j<from+len; j++)
 			if(defining[j] &&
 			    (!(keymap_was_set[j]) || !(keymap_was_set[j])[i]))
-				addkey(i, j, key);
+				addkey(i, j ^ table_xor, key);
 	}
 }
 
@@ -1029,8 +1068,13 @@ static void
 do_constant (void) {
 	int i, r0 = 0;
 
+    if (size_of_one_keymap == 256) {
+
+	table_xor = 0;
+	key_is_constant = key_is_constant0;
+
 	if (keymaps_line_seen)
-		while (r0 < max_keymap && !defining[r0])
+		while (r0 < MAX_NR_KEYMAPS && !defining[r0])
 			r0++;
 
 	for (i=0; i<NR_KEYS; i++) {
@@ -1039,9 +1083,53 @@ do_constant (void) {
 			if (!key_map[r0])
 				lkfatal(_("impossible error in do_constant"));
 			key = (key_map[r0])[i];
-			do_constant_key (i, key);
+			do_constant_key (i, key, 0, 256);
+		}
+	}
+
+    } else { /* size_of_one_keymap == 128 */
+
+	table_xor = 0;
+	key_is_constant = key_is_constant0;
+
+	r0 = 0;
+	if (keymaps_line_seen)
+		while (r0 < 128 && !defining[r0])
+			r0++;
+
+	for (i=0; i<NR_KEYS; i++) {
+		if (key_is_constant[i]) {
+			u_short key;
+			if (!key_map[r0])
+				lkfatal(_("impossible error in do_constant"));
+			key = (key_map[r0])[i];
+			do_constant_key (i, key, 0, 128);
+		}
+	}
+
+	table_xor = 128;
+	key_is_constant = key_is_constant1;
+
+	r0 = 128;
+	if (keymaps_line_seen)
+		while (r0 < 256 && !defining[r0])
+			r0++;
+
+	for (i=0; i<NR_KEYS; i++) {
+		if (key_is_constant[i]) {
+			u_short key;
+			if (!key_map[r0])
+				lkfatal(_("impossible error in do_constant"));
+			key = (key_map[r0])[i];
+			do_constant_key (i, key, 128, 128);
 		}
 	}
+
+    } /* size_of_one_keymap */
+
+	table_xor = 0;
+	key_is_constant = key_is_constant0;
+
 }
 
 static void
