diff -Naur orig/build/gyp_chromium patched/build/gyp_chromium
--- orig/build/gyp_chromium	2015-01-21 21:28:14.000000000 +0100
+++ patched/build/gyp_chromium	2015-01-23 21:20:09.919615700 +0100
@@ -113,7 +113,7 @@
     with open(supplement, 'r') as f:
       try:
         file_data = eval(f.read(), {'__builtins__': None}, None)
-      except SyntaxError, e:
+      except SyntaxError as e:
         e.filename = os.path.abspath(supplement)
         raise
       variables = file_data.get('variables', [])
@@ -212,13 +212,13 @@
     args.append('-Ganalyzer_output_path=' + args.pop(0))
 
   if int(os.environ.get('GYP_CHROMIUM_NO_ACTION', 0)):
-    print 'Skipping gyp_chromium due to GYP_CHROMIUM_NO_ACTION env var.'
+    print ('Skipping gyp_chromium due to GYP_CHROMIUM_NO_ACTION env var.')
     sys.exit(0)
 
   # Use the Psyco JIT if available.
   if psyco:
     psyco.profile()
-    print "Enabled Psyco JIT."
+    print ("Enabled Psyco JIT.")
 
   # Fall back on hermetic python if we happen to get run under cygwin.
   # TODO(bradnelson): take this out once this issue is fixed:
@@ -272,7 +272,7 @@
   # We explicitly don't support the make gyp generator (crbug.com/348686). Be
   # nice and fail here, rather than choking in gyp.
   if re.search(r'(^|,|\s)make($|,|\s)', os.environ.get('GYP_GENERATORS', '')):
-    print 'Error: make gyp generator not supported (check GYP_GENERATORS).'
+    print ('Error: make gyp generator not supported (check GYP_GENERATORS).')
     sys.exit(1)
 
   # If CHROMIUM_GYP_SYNTAX_CHECK is set to 1, it will invoke gyp with --check
@@ -287,13 +287,13 @@
   # TODO(dmikurube): Remove these checks and messages after a while.
   if ('linux_use_tcmalloc' in gyp_vars_dict or
       'android_use_tcmalloc' in gyp_vars_dict):
-    print '*****************************************************************'
-    print '"linux_use_tcmalloc" and "android_use_tcmalloc" are deprecated!'
-    print '-----------------------------------------------------------------'
-    print 'You specify "linux_use_tcmalloc" or "android_use_tcmalloc" in'
-    print 'your GYP_DEFINES. Please switch them into "use_allocator" now.'
-    print 'See http://crbug.com/345554 for the details.'
-    print '*****************************************************************'
+    print ('*****************************************************************')
+    print ('"linux_use_tcmalloc" and "android_use_tcmalloc" are deprecated!')
+    print ('-----------------------------------------------------------------')
+    print ('You specify "linux_use_tcmalloc" or "android_use_tcmalloc" in')
+    print ('your GYP_DEFINES. Please switch them into "use_allocator" now.')
+    print ('See http://crbug.com/345554 for the details.')
+    print ('*****************************************************************')
 
   # Automatically turn on crosscompile support for platforms that need it.
   # (The Chrome OS build sets CC_host / CC_target which implicitly enables
@@ -311,7 +311,7 @@
   args.extend(['-D', 'gyp_output_dir=' + GetOutputDirectory()])
 
   if not use_analyzer:
-    print 'Updating projects from gyp files...'
+    print ('Updating projects from gyp files...')
     sys.stdout.flush()
 
   # Off we go...
diff -Naur orig/build/gyp_helper.py patched/build/gyp_helper.py
--- orig/build/gyp_helper.py	2015-01-21 21:05:38.000000000 +0100
+++ patched/build/gyp_helper.py	2015-01-23 21:25:28.321194568 +0100
@@ -19,7 +19,7 @@
     file_contents = f.read()
   try:
     file_data = eval(file_contents, {'__builtins__': None}, None)
-  except SyntaxError, e:
+  except SyntaxError as e:
     e.filename = os.path.abspath(file_path)
     raise
   supported_vars = (
@@ -42,7 +42,7 @@
     file_val = file_data.get(var)
     if file_val:
       if var in os.environ:
-        print 'INFO: Environment value for "%s" overrides value in %s.' % (
+        print ('INFO: Environment value for "%s" overrides value in %s.') % (
             var, os.path.abspath(file_path)
         )
       else:
diff -Naur orig/build/vs_toolchain.py patched/build/vs_toolchain.py
--- orig/build/vs_toolchain.py	2015-01-21 21:28:14.000000000 +0100
+++ patched/build/vs_toolchain.py	2015-01-23 21:31:29.542985770 +0100
@@ -80,7 +80,7 @@
     if (os.path.isdir(os.path.dirname(target)) and
         (not os.path.isfile(target) or
           os.stat(target).st_mtime != os.stat(source).st_mtime)):
-      print 'Copying %s to %s...' % (source, target)
+      print ('Copying %s to %s...') % (source, target)
       if os.path.exists(target):
         os.unlink(target)
       shutil.copy2(source, target)
@@ -192,7 +192,7 @@
       # CopyVsRuntimeDlls via import, currently).
   }
   if len(sys.argv) < 2 or sys.argv[1] not in commands:
-    print >>sys.stderr, 'Expected one of: %s' % ', '.join(commands)
+    print >>sys.stderr, ('Expected one of: %s') % ', '.join(commands)
     return 1
   return commands[sys.argv[1]]()
 
