From b061daf24f8b79591189b67b0cc877b3589e9890 Mon Sep 17 00:00:00 2001
From: Martin Wimpress <code@flexion.org>
Date: Tue, 28 Apr 2015 22:32:45 +0100
Subject: [PATCH] Added Netbook panel layouts. Renamed Eleven to Cupertino.
 Renamed the default layout to GNOME2. Exit correctly when switching between
 Compiz and Marco. Completely reset the dconf tree when switching panel
 layouts.

---
 data/org.mate.mate-tweak.policy | 21 +++++++--
 mate-tweak                      | 46 ++++++++++++++++----
 setup.py                        |  2 +-
 util/mate-panel-backup          | 96 +++++++++++++++++++++++++++++++++++++++++
 4 files changed, 153 insertions(+), 12 deletions(-)
 create mode 100755 util/mate-panel-backup

diff --git a/data/org.mate.mate-tweak.policy b/data/org.mate.mate-tweak.policy
index 6dc4d81..9759fea 100644
--- a/data/org.mate.mate-tweak.policy
+++ b/data/org.mate.mate-tweak.policy
@@ -6,17 +6,32 @@
   <vendor>ubuntu-mate</vendor>
   <vendor_url>http://hal.freedesktop.org/docs/PolicyKit/</vendor_url>
 
-  <action id="org.freedesktop.policykit.pkexec.mate-tweak">
+  <action id="org.freedesktop.policykit.pkexec.disable-mate-volume-applet">
     <description>MATE Tweak Authentication dialogue</description>
     <message>This will disable the MATE Volume Applet from auto-starting
     because the Sound Indicator is automatically loaded when an Indicator
     enabled panel layout is selected.</message>
     <icon_name>system-run</icon_name>
     <defaults>
-      <allow_any>no</allow_any>
-      <allow_inactive>no</allow_inactive>
+      <allow_any>yes</allow_any>
+      <allow_inactive>auth_self</allow_inactive>
       <allow_active>auth_self_keep</allow_active>
     </defaults>
     <annotate key="org.freedesktop.policykit.exec.path">/usr/lib/mate-tweak/disable-mate-volume-applet</annotate>
   </action>
+
+  <action id="org.freedesktop.policykit.pkexec.mate-panel-backup">
+    <description>MATE Tweak Authentication dialogue</description>
+    <message>This will backup your MATE panel layout to
+    /usr/share/mate-panel/layouts.</message>
+    <icon_name>system-run</icon_name>
+    <defaults>
+      <allow_any>yes</allow_any>
+      <allow_inactive>auth_self</allow_inactive>
+      <allow_active>auth_self_keep</allow_active>
+    </defaults>
+    <annotate key="org.freedesktop.policykit.exec.path">/usr/lib/mate-tweak/mate-panel-backup</annotate>
+    <annotate key="org.freedesktop.policykit.exec.allow_gui">true</annotate>
+  </action>
+
 </policyconfig>
diff --git a/mate-tweak b/mate-tweak
index 10330ab..169b36a 100755
--- a/mate-tweak
+++ b/mate-tweak
@@ -20,17 +20,17 @@
 
 import errno
 import gettext
+import getpass
 import gi
 import os
 import shutil
 import subprocess
 import string
-import sys
 
 from gi.repository import Gtk, GdkPixbuf, Gdk, GObject
 from gi.repository import Gio
 
-__VERSION__="3.4.8"
+__VERSION__="3.4.9"
 
 # i18n
 gettext.install("mate-tweak", "/usr/share/locale")
@@ -174,6 +174,8 @@ class MateTweak:
         # Use this in python < 3.3. Python >= 3.3 has subprocess.DEVNULL
         devnull = open(os.devnull, 'wb')
         subprocess.Popen(['killall', 'mate-panel'], stdout=devnull, stderr=devnull)
+        subprocess.Popen(['dconf', 'reset', '-f', '/org/mate/panel/objects/'], stdout=devnull, stderr=devnull)
+        subprocess.Popen(['dconf', 'reset', '-f', '/org/mate/panel/toplevels/'], stdout=devnull, stderr=devnull)
         os.system('mate-panel --layout ' + panel_layout + ' --reset')
         subprocess.Popen(['mate-panel', '--replace'], stdout=devnull, stderr=devnull)
         devnull.close()
@@ -239,7 +241,7 @@ class MateTweak:
             self.replace_windowmanager(wm)
 
             # As we are replacing the window manager, exit MATE Tweak.
-            sys.exit(0)
+            Gtk.main_quit()
 
         elif schema == "org.mate.panel" and key == "default-layout":
             panel_layout = value
@@ -412,13 +414,24 @@ class MateTweak:
         if os.path.exists('/usr/lib/gnome-main-menu/main-menu'):
             gnome_menu_available = True
 
+        maximus_available = False
+        if os.path.exists('/usr/bin/mate-maximus') and
+           os.path.exists('/usr/lib/mate-netbook/mate-window-picker-applet'):
+            maximus_available = True
+
         dock = False
         if os.path.exists('/usr/bin/docky') or os.path.exists('/usr/bin/plank'):
             dock = True
 
         panels = Gtk.ListStore(str, str)
+
+        current_user = getpass.getuser()
+
+        if self.panel_layout_exists(current_user):
+            panels.append([_("Custom layout for: " + current_user), current_user])
+
         if self.panel_layout_exists('default'):
-            panels.append([_("MATE Desktop"), "default"])
+            panels.append([_("GNOME2"), "default"])
 
         if self.panel_layout_exists('ubuntu-mate'):
             panels.append([_("Ubuntu MATE"), "ubuntu-mate"])
@@ -452,22 +465,39 @@ class MateTweak:
             and mate_menu_available:
             panels.append([_("Redmond with Indicators and MATE Menu"), "redmond-indicators-fresh"])
 
+        if maximus_available:
+            if self.panel_layout_exists('netbook')
+                panels.append([_("Netbook"), "netbook"])
+
+            if self.panel_layout_exists('netbook-fresh') \
+                and mate_menu_available:
+                panels.append([_("Netbook with MATE Menu"), "netbook-fresh"])
+
+            if self.panel_layout_exists('netbook-indicators') \
+                and indicators_available:
+                panels.append([_("Netbook with Indicators"), "netbook-indicators"])
+
+            if self.panel_layout_exists('netbook-indicators-fresh') \
+                and indicators_available \
+                and mate_menu_available:
+                panels.append([_("Netbook with Indicators and MATE Menu"), "netbook-indicators-fresh"])
+
         if dock:
             if self.panel_layout_exists('eleven'):
-                panels.append([_("Eleven"), "eleven"])
+                panels.append([_("Cupertino"), "eleven"])
 
             if self.panel_layout_exists('eleven-fresh') \
                 and mate_menu_available:
-                panels.append([_("Eleven with MATE Menu"), "eleven-fresh"])
+                panels.append([_("Cupertino with MATE Menu"), "eleven-fresh"])
 
             if self.panel_layout_exists('eleven-indicators') \
                 and indicators_available:
-                panels.append([_("Eleven with Indicators"), "eleven-indicators"])
+                panels.append([_("Cupertino with Indicators"), "eleven-indicators"])
 
             if self.panel_layout_exists('eleven-indicators-fresh') \
                 and indicators_available \
                 and mate_menu_available:
-                panels.append([_("Eleven with Indicators and MATE Menu"), "eleven-indicators-fresh"])
+                panels.append([_("Cupertino with Indicators and MATE Menu"), "eleven-indicators-fresh"])
 
         if self.panel_layout_exists('linuxmint') \
             and mint_menu_available:
diff --git a/setup.py b/setup.py
index b83a602..9612f5b 100755
--- a/setup.py
+++ b/setup.py
@@ -53,7 +53,7 @@ data_files = [
     ('{prefix}/share/applications'.format(prefix=sys.prefix), ['data/mate-tweak.desktop',]),
     ('{prefix}/share/mate-tweak'.format(prefix=sys.prefix), ['data/mate-volume-control-applet.desktop',]),
     ('{prefix}/share/polkit/actions'.format(prefix=sys.prefix), ['data/org.mate.mate-tweak.policy',]),
-    ('{prefix}/lib/mate-tweak'.format(prefix=sys.prefix), ['data/mate-tweak.ui', 'util/disable-mate-volume-applet',]),
+    ('{prefix}/lib/mate-tweak'.format(prefix=sys.prefix), ['data/mate-tweak.ui', 'util/disable-mate-volume-applet', 'util/mate-panel-backup']),
 ]
 data_files.extend(datafilelist('{prefix}/share/locale'.format(prefix=sys.prefix), 'build/mo'))
 
diff --git a/util/mate-panel-backup b/util/mate-panel-backup
new file mode 100755
index 0000000..ab20bab
--- /dev/null
+++ b/util/mate-panel-backup
@@ -0,0 +1,96 @@
+#!/usr/bin/env python2
+# -*- coding: utf-8 -*-
+
+# Copyright (C) 2015 Martin Wimpress <code@ubuntu-mate.org>
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the
+# Free Software Foundation, Inc.,
+# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.
+
+from __future__ import unicode_literals, print_function, absolute_import
+from gi.repository import Gio
+import getpass
+import os.path
+
+VALID = {'toplevel': ('expand', 'size', 'orientation'),
+         'launcher': ('object-type', 'launcher-location', 'menu-path', 'toplevel-id', 'position', 'panel-right-stick', 'locked'),
+         'applet': ('object-type', 'applet-iid', 'toplevel-id', 'position', 'panel-right-stick', 'locked'),
+         'menu-bar': ('object-type', 'applet-iid', 'toplevel-id', 'position', 'panel-right-stick', 'locked'),
+         'menu': ('object-type', 'toplevel-id', 'position', 'panel-right-stick', 'locked'),
+         'action': ('object-type', 'action-type', 'position', 'toplevel-id', 'panel-right-stick', 'locked'),
+         'separator': ('object-type', 'toplevel-id', 'position', 'panel-right-stick', 'locked')}
+
+schemas = {'panel': 'org.mate.panel',
+           'object': 'org.mate.panel.object',
+           'toplevel':'org.mate.panel.toplevel'}
+
+paths = {'object': '/org/mate/panel/objects/',
+         'toplevel': '/org/mate/panel/toplevels/'}
+
+general_settings = Gio.Settings.new(schemas['panel'])
+
+toplevel_ids = general_settings['toplevel-id-list']
+object_ids = general_settings['object-id-list']
+
+layout = []
+
+for toplevel in toplevel_ids:
+    settings = Gio.Settings.new_with_path(
+        schemas['toplevel'],
+        paths['toplevel'] + toplevel + '/')
+
+    layout.append("[Toplevel %s]\n" % toplevel)
+
+    for key in settings.keys():
+        val = settings[key]
+        if str(val) == "True" or str(val) == "False":
+            val = str(val).lower()
+
+        if key in VALID['toplevel']:
+            layout.append("%s=%s\n" % (key, val))
+    layout.append("\n")
+
+for obj in object_ids:
+    settings = Gio.Settings.new_with_path(
+        schemas['object'],
+        paths['object'] + obj + '/')
+
+    obj_toplevel = settings['toplevel-id']
+    obj_type = settings['object-type']
+    obj_name = ""
+    if obj_type == "applet":
+        obj_name = settings['applet-iid'].split(":")[-1]
+    elif obj_type == "action":
+        obj_name = settings['action-type']
+    else:
+        obj_name = obj_type
+
+    if not obj_toplevel in toplevel_ids:
+        print("WARNING! object \"%s\" references unknown toplevel... skipped" % obj_name)
+        continue
+        
+    layout.append("[Object %s]\n" % obj_name.lower())
+    for key in settings.keys():
+        if key in VALID[obj_type]:
+            val = settings[key]
+            if str(val) == "True" or str(val) == "False":
+                val = str(val).lower()
+
+            layout.append("%s=%s\n" % (key, val))
+    layout.append("\n")
+
+current_user = getpass.getuser()
+
+with open(os.path.join('/','usr','share','mate-panel','layouts',current_user + '.layout'), 'w') as fobj:
+    fobj.writelines(layout)
-- 
2.1.1
