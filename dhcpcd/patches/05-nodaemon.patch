diff -Naurdp dhcpcd-1.3.22-pl4/dhcpcd.8 dhcpcd-1.3.22-pl4.nodaemon/dhcpcd.8
--- dhcpcd-1.3.22-pl4/dhcpcd.8	2003-01-01 02:31:31.000000000 +0100
+++ dhcpcd-1.3.22-pl4.nodaemon/dhcpcd.8	2010-05-27 20:10:14.000000000 +0200
@@ -195,6 +195,9 @@ and
 .I \-I \ <ClientID>
 options.
 .TP
+.BI \-x
+Don't fork into background. Good for use from inittab.
+.TP
 .BI \-t \ <timeout>
 Specifies (in seconds ) for how long
 .B dhcpcd
diff -Naurdp dhcpcd-1.3.22-pl4/dhcpcd.c dhcpcd-1.3.22-pl4.nodaemon/dhcpcd.c
--- dhcpcd-1.3.22-pl4/dhcpcd.c	2003-01-01 02:26:32.000000000 +0100
+++ dhcpcd-1.3.22-pl4.nodaemon/dhcpcd.c	2010-05-27 20:08:08.000000000 +0200
@@ -74,6 +74,8 @@ int		SetDHCPDefaultRoutes=	1;
 unsigned char	ClientMACaddr[ETH_ALEN];
 int		ClientMACaddr_ind =	0;
 #endif
+int		NoDaemon	=	0;
+
 /*****************************************************************************/
 void print_version()
 {
@@ -322,10 +324,14 @@ prgs: switch ( argc[i][s] )
 	      goto usage;
 	    s=1;
 	    if ( LeaseTime > 0 ) break;
+	  case 'x':
+	    s++;
+	    NoDaemon=1;
+	    goto prgs;
           default:
 usage:	    print_version();
 	    fprintf(stderr,
-"Usage: dhcpcd [-dknrBCDHNRSTY] [-l leasetime] [-h hostname] [-t timeout]\n\
+"Usage: dhcpcd [-dknrxBCDHNRSTY] [-l leasetime] [-h hostname] [-t timeout]\n\
        [-i vendorClassID] [-I ClientID] [-c filename] [-s [ipaddr]]\n\
        [-w windowsize] [-L ConfigDir] [-G [gateway]] [interface]\n");
 	    exit(1);
@@ -378,24 +384,28 @@ usage:	    print_version();
 #ifdef DEBUG
   writePidFile(getpid());
 #else
+  if ( NoDaemon ) {
+    writePidFile(getpid());
+  } else {
 #ifdef EMBED
-  s=vfork();
+    s=vfork();
 #else
-  s=fork();
+    s=fork();
 #endif
-  if ( s )
-    {
-      writePidFile(s);
-      exit(0); /* got into bound state. */
-    }
-  setsid();
-  if ( (i=open("/dev/null",O_RDWR,0)) >= 0 )
-    {
-      (void)dup2(i,STDIN_FILENO);
-      (void)dup2(i,STDOUT_FILENO);
-      (void)dup2(i,STDERR_FILENO);
-      if ( i > 2 ) (void)close(i);
-    }
+    if ( s )
+      {
+        writePidFile(s);
+        exit(0); /* got into bound state. */
+      }
+    setsid();
+    if ( (i=open("/dev/null",O_RDWR,0)) >= 0 )
+      {
+        (void)dup2(i,STDIN_FILENO);
+        (void)dup2(i,STDOUT_FILENO);
+        (void)dup2(i,STDERR_FILENO);
+        if ( i > 2 ) (void)close(i);
+      }
+  }
 #endif
   chdir("/");
   do currState=(void *(*)())currState(); while ( currState );
